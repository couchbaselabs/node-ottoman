"use strict";(self.webpackChunkottoman_documentation=self.webpackChunkottoman_documentation||[]).push([[6447],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(t),u=o,h=m["".concat(p,".").concat(u)]||m[u]||c[u]||r;return t?a.createElement(h,i(i({ref:n},d),{},{components:t})):a.createElement(h,i({ref:n},d))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6331:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=t(7462),o=(t(7294),t(3905));const r={sidebar_position:2,title:"Advanced Concepts"},i="Advanced Concepts",l={unversionedId:"advanced/ottoman",id:"advanced/ottoman",title:"Advanced Concepts",description:"This section will cover some advanced concepts and options in Ottoman.",source:"@site/docs/advanced/ottoman.md",sourceDirName:"advanced",slug:"/advanced/ottoman",permalink:"/docs/advanced/ottoman",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Advanced Concepts"},sidebar:"tutorialSidebar",previous:{title:"How Ottoman Works",permalink:"/docs/advanced/how-ottoman-works"},next:{title:"Mongoose to Ottoman",permalink:"/docs/advanced/mongoose-to-couchbase"}},p={},s=[{value:"Ottoman Configuration",id:"ottoman-configuration",level:2},{value:"PopulateMaxDeep Option",id:"populatemaxdeep-option",level:3},{value:"Shape the Solution",id:"shape-the-solution",level:4},{value:"Saving Documents",id:"saving-documents",level:4},{value:"Retrieving Documents with Populate",id:"retrieving-documents-with-populate",level:4}],d={toc:s};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"advanced-concepts"},"Advanced Concepts"),(0,o.kt)("p",null,"This section will cover some advanced concepts and options in ",(0,o.kt)("inlineCode",{parentName:"p"},"Ottoman"),"."),(0,o.kt)("h2",{id:"ottoman-configuration"},"Ottoman Configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"interface OttomanConfig {\n  collectionName?: string;\n  scopeName?: string;\n  idKey?: string;\n  modelKey?: string;\n  populateMaxDeep?: number;\n  consistency?: SearchConsistency;\n  maxExpiry?: number;\n  keyGenerator?: (params: { metadata: ModelMetadata }) => string;\n  keyGeneratorDelimiter?: string;\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"collectionName"),": Store value to use for each Model if not provided. Default: Model's name"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"scopeName"),": Store value to use for each Model if not provided. Default: ",(0,o.kt)("inlineCode",{parentName:"li"},"_default")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"idKey"),": Value of the key to save your ",(0,o.kt)("strong",{parentName:"li"},"id"),". Default: Document's ",(0,o.kt)("inlineCode",{parentName:"li"},"id")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"modelKey"),": Key to store the model name into the document. Default: ",(0,o.kt)("inlineCode",{parentName:"li"},"_type")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"populateMaxDeep"),": Numeric Value for how many levels deep you want to ",(0,o.kt)("em",{parentName:"li"},"_populate"),". Default: ",(0,o.kt)("inlineCode",{parentName:"li"},"1")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"consistency"),": Value for ",(0,o.kt)("em",{parentName:"li"},"Search Consistency Strategy"),". Default: ",(0,o.kt)("inlineCode",{parentName:"li"},"SearchConsistency.NONE")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"maxExpiry"),": Numeric value (based in Milliseconds) used to create a collection for this instance. Default: ",(0,o.kt)("inlineCode",{parentName:"li"},"300000")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"keyGenerator"),": Function to generate the key to store documents. Default: ",(0,o.kt)("inlineCode",{parentName:"li"},"(params: { metadata: ModelMetadata }) => string")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"keyGeneratorDelimiter"),": String value used to build the document key. Default: ",(0,o.kt)("inlineCode",{parentName:"li"},"::"))),(0,o.kt)("p",null,"A complete new section is available to show how the ",(0,o.kt)("a",{parentName:"p",href:"/docs/advanced/how-ottoman-works.html#key-generation-layer"},"key-generation-layer")," works."),(0,o.kt)("h3",{id:"populatemaxdeep-option"},"PopulateMaxDeep Option"),(0,o.kt)("p",null,"This option sets the default value for the population. The default value is ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),". This number will be the number of times ",(0,o.kt)("inlineCode",{parentName:"p"},"Ottoman")," will go deeper populating the ",(0,o.kt)("inlineCode",{parentName:"p"},"document"),"."),(0,o.kt)("h4",{id:"shape-the-solution"},"Shape the Solution"),(0,o.kt)("p",null,"Let's see a whole example to show how to populate and populateMaxDeep option works using ",(0,o.kt)("inlineCode",{parentName:"p"},"ReferenceType"),":\nWe'll go to create Address, Person, Company ",(0,o.kt)("inlineCode",{parentName:"p"},"Models"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Schema, model } from 'ottoman';\n\nconst addressSchema = new Schema({\n  address: String\n})\n\nconst personSchema = Schema({\n  name: String,\n  age: Number,\n  address: { type: addressSchema, ref: 'Address'}\n});\n\nconst companySchema = Schema({\n  president: { type: personSchema, ref: 'Person' },\n  ceo: { type: personSchema, ref: 'Person' },\n  name: String,\n  workers: [{ type: personSchema, ref: 'Person' }]\n});\n\nconst Address = model('Address', addressSchema);\nconst Story = model('Story', storySchema);\nconst Company = model('Company', companySchema);\n")),(0,o.kt)("p",null,'In the example above, we define a "Schema" for the company that uses the "Person" schema to define "president" and "workers" and the person scheme uses the address Schema in turn. A reference representation of the modeling might be ',(0,o.kt)("inlineCode",{parentName:"p"},"Company -> Person -> Address"),"."),(0,o.kt)("h4",{id:"saving-documents"},"Saving Documents"),(0,o.kt)("p",null,"Now we are going to create a new Company with John Smith as President and Jane Doe as CEO."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const johnAddress = new Address({address: '13 Washington Square S, New York, NY 10012, USA'});\nawait address.save();\n\nconst john = new Person({name: 'John Smith', age: 52, address: johnAddress});\nawait john.save();\n\nconst janeAddress = new Address({address: '55 Clark St, Brooklyn, NY 11201, USA'});\nawait address.save();\n\nconst jane = new Person({name: 'Jane Doe', age: 45, address: janeAddress});\nawait jane.save();\n\nconst spaceX = new Company({name: 'Space X', president: john, ceo: jane})\nawait spaceX.save()\n")),(0,o.kt)("p",null,"These few lines of code create the ",(0,o.kt)("inlineCode",{parentName:"p"},"Space X")," company. Notice how we use the ReferenceType to create\nrelations between our models."),(0,o.kt)("h4",{id:"retrieving-documents-with-populate"},"Retrieving Documents with Populate"),(0,o.kt)("p",null,"We already have the ",(0,o.kt)("inlineCode",{parentName:"p"},"Space X")," company saved, let's see how we can retrieve it"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// this line of code will quere db for the Space X company\nconst spaceX = await Company.findOne({name: 'Space X'});\n")),(0,o.kt)("p",null,"The result should look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "2454353-34543-34534534",\n  "name": "Space X",\n  "president": "123456-1234-12345",\n  "ceo": "654321-4321-54321"\n}\n')),(0,o.kt)("p",null,"Notice: The ",(0,o.kt)("inlineCode",{parentName:"p"},"president")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ceo")," field don't have the data, they are just saving a reference to the data in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Person")," collection"),(0,o.kt)("p",null,"If we want to get the data reference for the ",(0,o.kt)("inlineCode",{parentName:"p"},"president")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ceo")," fields we need to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"populate")," feature."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// first we need to Space X company\nconst spaceX = await Company.findOne({name: 'Space X'});\n\n// now we will use _populate function to populate the references\nawait spaceX._populate('*')\n")),(0,o.kt)("p",null,"::: tip\nThe '_populate' function will receive 1 or many field names separate by a comma to know\nthe field to populate or just use the ",(0,o.kt)("inlineCode",{parentName:"p"},"*")," wildcard to populate all references in the document,\nas we showed in the above example. If you want just to populate the ",(0,o.kt)("inlineCode",{parentName:"p"},"ceo")," field for example you\njust need to write this line instead ",(0,o.kt)("inlineCode",{parentName:"p"},"await spaceX._populate('ceo')"),".\n:::"),(0,o.kt)("p",null,"The result should look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "2454353-34543-34534534",\n  "name": "Space X",\n  "president": {\n    "id": "123456-1234-12345",\n    "name": "John Smith",\n    "age": 52,\n    "address": "34215-7645-87906"\n  },\n  "ceo": {\n    "id": "654321-4321-54321",\n    "name": "Jane Doe",\n    "age": 45,\n    "address": "10032-7645-87906"\n  }\n}\n')),(0,o.kt)("p",null,"As you can see we retrieved successfully the data for the ",(0,o.kt)("inlineCode",{parentName:"p"},"president")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ceo")," fields, but if you look\ncloser the address field inside them still have a reference to the address, due to we have 3 level\nof nested ",(0,o.kt)("inlineCode",{parentName:"p"},"Schemas"),", for a case like this, we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"populateMaxDeep")," option, the default value is 1,\nthis means that only the field in the first level will be populated even if we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"*")," wildcard,\nthis wildcard is only to notified the fields to populate not the deep of the search if we use nested ",(0,o.kt)("inlineCode",{parentName:"p"},"Schemas")," and want to ",(0,o.kt)("inlineCode",{parentName:"p"},"Ottoman")," handle the population we need to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"populateMaxDeep")," option. Let's see how it work."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// first we need to Space X company\nconst spaceX = await Company.findOne({name: 'Space X'});\n\n// now we will use _populate function to populate the references\nawait spaceX._populate('*', 2)\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"_populate")," function accepts a second argument to define ",(0,o.kt)("inlineCode",{parentName:"p"},"populateMaxDeep")," if we set it to look deep for 2 level\nthe result will be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "2454353-34543-34534534",\n  "name": "Space X",\n  "president": {\n    "id": "123456-1234-12345",\n    "name": "John Smith",\n    "age": 52,\n    "address": {\n      "id": "34215-7645-87906",\n      "address": "13 Washington Square S, New York, NY 10012, USA"\n    }\n  },\n  "ceo": {\n    "id": "654321-4321-54321",\n    "name": "Jane Doe",\n    "age": 45,\n    "address": {\n      "id": "10032-7645-87906",\n      "address": "55 Clark St, Brooklyn, NY 11201, USA"\n    }\n  }\n}\n')),(0,o.kt)("p",null,"Congratulations! You retrieve the entire ",(0,o.kt)("inlineCode",{parentName:"p"},"Space X")," data, from the nested Schemas ",(0,o.kt)("inlineCode",{parentName:"p"},"Company -> Person -> Address")," design."),(0,o.kt)("p",null,"::: tip Rewriting ",(0,o.kt)("inlineCode",{parentName:"p"},"populateMaxDeep"),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"populateMaxDeep")," option is set to 1, as we can see in the previous example, but you can override it when creating the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Ottoman")," instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const ottoman = new Ottoman({populateMaxDeep: 5});\n\n...\n\n// will populate 5 level down from nested references\nawait spaceX._populate('*')\n")),(0,o.kt)("p",null,"This way every ",(0,o.kt)("inlineCode",{parentName:"p"},"_populate")," function will try to populate documents 5 levels deep instead of just 1 default and recommended value. Populations are one of the more expensive operations in Databases as a general concept, try to avoid high numbers in ",(0,o.kt)("inlineCode",{parentName:"p"},"populateMaxDeep"),". Ottoman takes advantage of key/value operation to execute populate to reduce the query times as much as possible.\n:::"))}c.isMDXComponent=!0}}]);