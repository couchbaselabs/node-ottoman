"use strict";(self.webpackChunkottoman_documentation=self.webpackChunkottoman_documentation||[]).push([[9135],{2745:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"advanced/ottomanV1-to-ottomanV2","title":"Ottoman V1 to Ottoman V2","description":"Ottoman, for Couchbase, is an object document mapper (ODM) that allows you build what your object model would look like,","source":"@site/docs/advanced/ottomanV1-to-ottomanV2.md","sourceDirName":"advanced","slug":"/advanced/ottomanV1-to-ottomanV2","permalink":"/docs/advanced/ottomanV1-to-ottomanV2","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Ottoman for Couchbase Node.js SDK developers","permalink":"/docs/advanced/ottoman-couchbase"},"next":{"title":"Ottoman vs. SDK Comparison","permalink":"/docs/advanced/sdk-comparison"}}');var r=t(4848),s=t(8453);const a={},i="Ottoman V1 to Ottoman V2",c={},d=[{value:"Import Ottoman Module",id:"import-ottoman-module",level:2},{value:"Couchbase Bucket Connection",id:"couchbase-bucket-connection",level:2},{value:"Sample Model Definition",id:"sample-model-definition",level:2},{value:"Create New User Documents",id:"create-new-user-documents",level:3},{value:"Persist Documents to Our Bucket",id:"persist-documents-to-our-bucket",level:2},{value:"Retrieve Records From our Bucket",id:"retrieve-records-from-our-bucket",level:2},{value:"Updating an Existing Document",id:"updating-an-existing-document",level:2}];function l(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ottoman-v1-to-ottoman-v2",children:"Ottoman V1 to Ottoman V2"})}),"\n",(0,r.jsx)(n.p,{children:"Ottoman, for Couchbase, is an object document mapper (ODM) that allows you build what your object model would look like,\nthen auto-generate all the boilerplate logic that goes with it."}),"\n",(0,r.jsx)(n.p,{children:"Ottoman us to easily access CRUD commands for Couchbase Server using Node.js. To use Ottoman, make sure you add it to\nyour Node.js project by using the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"npm install ottoman\n"})}),"\n",(0,r.jsx)(n.p,{children:"Or using yarn:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"yarn add ottoman\n"})}),"\n",(0,r.jsx)(n.h2,{id:"import-ottoman-module",children:"Import Ottoman Module"}),"\n",(0,r.jsx)(n.p,{children:"Now that the libraries have been downloaded to our project, we need to include it in our source code. This can be done\nby adding the following code:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"V1"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const ottoman = require('ottoman');\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Current Version"})})}),"\n",(0,r.jsx)(n.p,{children:"Current version entirely have support for typescript and you can also do:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {getDefaultInstance, Ottoman} from 'ottoman';\n"})}),"\n",(0,r.jsx)(n.h2,{id:"couchbase-bucket-connection",children:"Couchbase Bucket Connection"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"V1"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"ottoman.bucket = (new couchbase.Cluster('http://127.0.0.1:8091')).openBucket('bucket-name-here');\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Current Version"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// get the default Ottoman instance\nlet ottoman = getDefaultInstance();\n\nif (!ottoman) {\n  // if not exist default one, then create\n  ottoman = new Ottoman({collectionName: '_default'});\n}\n\nconst main = async () => {\n  await ottoman.connect({\n    connectionString: 'couchbase://127.0.0.1', // with default port 8091\n    bucketName: 'bucket-name-here',\n    username: 'Administrator',\n    password: 'password'\n  });\n}\n\nmain();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"sample-model-definition",children:"Sample Model Definition"}),"\n",(0,r.jsx)(n.p,{children:"Before we can start doing CRUD operations against Couchbase, we need to define our Ottoman model. These models represent\ndocuments in our database."}),"\n",(0,r.jsx)(n.p,{children:"The models we create with Ottoman can have properties and methods."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"V1"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const UserModel = ottoman.model('User', {\n  firstName: {type: 'string'},\n  lastName: {type: 'string'},\n  email: {type: 'string'}\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Current Version"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const UserModel = ottoman.model('User', {\n  firstName: String,\n  lastName: String,\n  email: String\n})\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-new-user-documents",children:"Create New User Documents"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const myUser = new UserModel({\n  firstName: 'Perry',\n  lastName: 'Mason',\n  email: 'perry.mason@example.com',\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"persist-documents-to-our-bucket",children:"Persist Documents to Our Bucket"}),"\n",(0,r.jsxs)(n.p,{children:["So far we have simply defined the model structure and created documents locally. Now we can persist the documents\ncalling Ottoman's ",(0,r.jsx)(n.code,{children:"save()"})," method on each object:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"V1"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'myUser.save(function (error) {\n  if (error) {\n    console.log("An error happened:" + JSON.stringify(error));\n    return;\n  }\n  console.log(`SUCCESS: user ${myUser.firstName} added!`);\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Current Version"})})}),"\n",(0,r.jsx)(n.p,{children:"Using the async/await technique:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const runAsync = async () => {\n  await myUser.save();\n  console.log(`SUCCESS: user ${myUser.firstName} added!`);\n}\n\nottoman.start()\n  .then(runAsync)\n  .catch((error) => console.log('An error happened: ' + JSON.stringify(error)))\n  .finally(process.exit)\n"})}),"\n",(0,r.jsx)(n.p,{children:"The output will be something like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"> SUCCESS: user Perry added!\n"})}),"\n",(0,r.jsx)(n.h2,{id:"retrieve-records-from-our-bucket",children:"Retrieve Records From our Bucket"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"V1"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Finding All Documents\nUserModel.find({}, function (error, result) {\n  // Do something with the resulting Ottoman models\n});\n\n// Finding a Specific Document\nUserModel.find({lastName: 'Mason'}, function (error, result) {\n  // Do something with the resulting Ottoman model\n});\n\n// Find a Document by ID\nUserModel.getById('document-id-here', function (error, result) {\n  // Do something with the resulting Ottoman model\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Current Version"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Finding All Documents\nawait UserModel.find({}, {select: 'firstName,email', limit: 20});\n\n// Finding a Specific Document\nawait UserModel.find({lastName: 'Mason'});\n\n// Find a Document by ID\nawait UserModel.findById('document-id-here');\n"})}),"\n",(0,r.jsx)(n.h2,{id:"updating-an-existing-document",children:"Updating an Existing Document"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"V1"})})}),"\n",(0,r.jsx)(n.p,{children:"Updating documents in Version1 with Ottoman can be a little tricky because you must first have loaded the document\nbefore trying to do a manipulation on it. What you could do is find the particular document by id, then perform the save\ncommand like so:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"UserModel.getById('document-id-here', function (error, result) {\n  if (error) {\n    console.log('An error happened: ' + JSON.stringify(error));\n  }\n  result.firstname = 'Nicolas',\n    result.save(function (error) {\n      if (error) {\n        console.log('An error happened: ' + JSON.stringify(error));\n      }\n    });\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Current version"})})}),"\n",(0,r.jsx)(n.p,{children:"Is more simple do that with current version:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"await UserModel.updateById('document-id-here', {firstname: 'Nicolas'});\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(6540);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);