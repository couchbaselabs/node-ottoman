"use strict";(self.webpackChunkottoman_documentation=self.webpackChunkottoman_documentation||[]).push([[1244],{32:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>r});const o=JSON.parse('{"id":"basic/model","title":"Models","description":"Models are fancy constructors compiled from Schema definitions.","source":"@site/docs/basic/model.md","sourceDirName":"basic","slug":"/basic/model","permalink":"/docs/basic/model","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Models"},"sidebar":"tutorialSidebar","previous":{"title":"Schemas","permalink":"/docs/basic/schema"},"next":{"title":"Documents","permalink":"/docs/basic/document"}}');var t=s(4848),i=s(8453);const a={sidebar_position:3,title:"Models"},c="Model",l={},r=[{value:"Compiling Your First Model",id:"compiling-your-first-model",level:2},{value:"Model Options",id:"model-options",level:3},{value:"Model Id",id:"model-id",level:3},{value:"Constructing Documents",id:"constructing-documents",level:2},{value:"Create Many",id:"create-many",level:3},{value:"Querying",id:"querying",level:2},{value:"Advanced Use of Select Parameter",id:"advanced-use-of-select-parameter",level:3},{value:"Advanced Use of Filter Parameter",id:"advanced-use-of-filter-parameter",level:3},{value:"Use of <code>ignoreCase</code>",id:"use-of-ignorecase",level:3},{value:"Use of <code>lean</code>",id:"use-of-lean",level:3},{value:"Use <code>lean</code> and  <code>populate</code>",id:"use-lean-and--populate",level:3},{value:"When to Use <code>lean</code>",id:"when-to-use-lean",level:3},{value:"Deleting",id:"deleting",level:2},{value:"Updating",id:"updating",level:2},{value:"Handling Multilpe Models",id:"handling-multilpe-models",level:2},{value:"Getting Existing Models",id:"getting-existing-models",level:3},{value:"Drop Collection",id:"drop-collection",level:3},{value:"Next Up",id:"next-up",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"model",children:"Model"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/api/classes/model.html",children:"Models"})," are fancy constructors compiled from ",(0,t.jsx)(n.a,{href:"/docs/basic/schema",children:"Schema"})," definitions."]}),"\n",(0,t.jsxs)(n.p,{children:["An instance of a model is called a ",(0,t.jsx)(n.a,{href:"/docs/basic/document.html",children:"document"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Models are responsible for creating and reading documents from the underlying Couchbase database."}),"\n",(0,t.jsx)(n.h2,{id:"compiling-your-first-model",children:"Compiling Your First Model"}),"\n",(0,t.jsxs)(n.p,{children:["When you call ",(0,t.jsx)(n.a,{href:"/docs/api/classes/ottoman.html#model",children:"model()"})," function on a schema, Ottoman compiles a model for you."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const schema = new Schema({ name: String, age: Number });\nconst User = model('User', schema);\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/docs/api/classes/ottoman.html#model",children:"model()"})," function makes a copy of the ",(0,t.jsx)(n.code,{children:"schema"}),". Make sure that you've added everything you want to the ",(0,t.jsx)(n.code,{children:"schema"}),", including hooks, before calling ",(0,t.jsx)(n.code,{children:"model()"}),"!"]})}),"\n",(0,t.jsx)(n.h3,{id:"model-options",children:"Model Options"}),"\n",(0,t.jsxs)(n.p,{children:["You can pass a third argument to ",(0,t.jsx)(n.a,{href:"/docs/api/classes/ottoman.html#model",children:"model()"})," functions in order to setup your needs.\nIn the next example we will set the ",(0,t.jsx)(n.code,{children:"collectionName"})," to be ",(0,t.jsx)(n.code,{children:"users"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const schema = new Schema({ name: String, age: Number });\nconst User = model('User', schema, { collectionName: 'users' });\n"})}),"\n",(0,t.jsxs)(n.admonition,{title:"Defining Collection Name",type:"tip",children:[(0,t.jsx)(n.p,{children:"Models will be mapped to your Collections, if no Collection name option is provided then the Collection name will be equal to the Model name.\nThere is an exception to this rule:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If you provide a ",(0,t.jsx)(n.code,{children:"collectionName"})," option at Ottoman instance level then the Collection name will be equal to Ottoman ",(0,t.jsx)(n.code,{children:"collectionName"})," option\nif it's not explicitly passed as ",(0,t.jsx)(n.code,{children:"collectionName"})," in model options."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Ottoman } from 'ottoman';\n\nconst ottoman = new Ottoman({ collectionName: '_default' });\nconst schema = new Schema({ name: String, age: Number });\n\n// Collection name for model `Cat` will be `_default`\nconst Cat = ottoman.model('Cat', schema);\n\n// Collection name for model `Dog` will be `dogs`\nconst Dog = ottoman.model('Dog', schema, { collectionName: 'dogs' });\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Therefore this is the way to get the Collection name for a Model:\nCollection Name = Model ",(0,t.jsx)(n.code,{children:"collectionName"})," Options > Ottoman ",(0,t.jsx)(n.code,{children:"collectionName"})," Options > Model name"]}),"\n"]}),"\n"]})]}),"\n",(0,t.jsx)(n.p,{children:"The models options are:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface ModelOptions {\n  collectionName?: string;\n  scopeName?: string;\n  idKey?: string;\n  modelKey?: string;\n  maxExpiry?: number;\n  keyGenerator?: (params: { metadata: ModelMetadata }) => string;\n  keyGeneratorDelimiter?: string;\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"collectionName"}),": define the collection name to be use in the Couchbase Server. The default value will be the Model's name."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"scopeName"}),": define the scope where the collection will be placed. The default value is ",(0,t.jsx)(n.code,{children:"_default"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"idKey"}),": it's the value of the key to save your id. The default value is set to 'id'."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"modelKey"}),": define the key to store the model name into the document. The default value is ",(0,t.jsx)(n.code,{children:"_type"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"maxExpiry"}),": value used to create a collection for this instance. The default value is ",(0,t.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"keyGenerator"}),": function to generate the key to store documents."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"keyGeneratorDelimiter"}),": string value used to build the document key. The default value is ",(0,t.jsx)(n.code,{children:"::"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If you don't provided a ",(0,t.jsx)(n.code,{children:"keyGenerator"})," or ",(0,t.jsx)(n.code,{children:"keyGeneratorDelimiter"})," implementation it will be inherited by ",(0,t.jsx)(n.code,{children:"Ottoman"})," instance options, check this in ",(0,t.jsx)(n.a,{href:"/docs/basic/ottoman.html#ottoman-constructor-options",children:"Ottoman options"})]}),"\n",(0,t.jsx)(n.h3,{id:"model-id",children:"Model Id"}),"\n",(0,t.jsxs)(n.p,{children:["Ottoman will generate automatically your document's ",(0,t.jsx)(n.code,{children:"id"})," and will guarantee that each ",(0,t.jsx)(n.code,{children:"id"})," will be unique."]}),"\n",(0,t.jsxs)(n.p,{children:["Each document's ",(0,t.jsx)(n.code,{children:"id"})," will be included on the document under a property called ",(0,t.jsx)(n.code,{children:"id"})," by default."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"id"})," property name can be modified using the ",(0,t.jsx)(n.code,{children:"ModelOptions.idKey"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const schema = new Schema({ name: String, age: Number });\nconst User = model('User', schema, { collectionName: 'users', idKey: '__id' });\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The above example will override the default ",(0,t.jsx)(n.code,{children:"id"})," with ",(0,t.jsx)(n.code,{children:"__id"}),", now for the ",(0,t.jsx)(n.code,{children:"User"}),"'s documents you can get the ",(0,t.jsx)(n.code,{children:"id"})," value from doc.__id."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["You can also get the ",(0,t.jsx)(n.code,{children:"id"})," value by calling the ",(0,t.jsx)(n.code,{children:"doc._getId()"})," methods, regardless of the ",(0,t.jsx)(n.code,{children:"id"})," property name."]})}),"\n",(0,t.jsx)(n.h2,{id:"constructing-documents",children:"Constructing Documents"}),"\n",(0,t.jsxs)(n.p,{children:["An instance of a model is called a ",(0,t.jsx)(n.a,{href:"/docs/basic/document",children:"document"}),". Creating and saving them to the database is easy."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const User = model('User', schema);\n\nconst user = new User({ name: 'Jane', age: 29 });\n\nuser.save();\n// saved!\n\nUser.create({ name: 'Jane', age: 29 });\n// also saved!\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Note that no users will be created/removed until the connection that your model uses is open.\nEvery model has an associated connection. When you use ",(0,t.jsx)(n.a,{href:"/docs/api/classes/ottoman.html#model",children:"model()"}),",\nyour model will use the default Ottoman connection."]}),"\n",(0,t.jsx)(n.h3,{id:"create-many",children:"Create Many"}),"\n",(0,t.jsxs)(n.p,{children:["Also, you can use ",(0,t.jsx)(n.code,{children:"createMany"})," static function to create multiples documents at once.\nSee the ",(0,t.jsx)(n.a,{href:"/docs/api/interfaces/imodel.html#static-createmany",children:"API"})," docs for more detail."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"User.createMany([{ name: 'John' }, { name: 'Jane' }]);\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["The response status will be ",(0,t.jsx)(n.strong,{children:"SUCCESS"})," as long as no error occurs, otherwise it will be ",(0,t.jsx)(n.strong,{children:"FAILURE"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"querying",children:"Querying"}),"\n",(0,t.jsxs)(n.p,{children:["Finding documents is easy with Ottoman, powered by the built-in Query Builder.\nDocuments can be retrieved using each ",(0,t.jsx)(n.code,{children:"models"})," ",(0,t.jsx)(n.a,{href:"/docs/api/interfaces/imodel.html#find",children:"find"}),", ",(0,t.jsx)(n.a,{href:"/docs/api/interfaces/imodel.html#findbyid",children:"findById"}),", ",(0,t.jsx)(n.a,{href:"/docs/api/interfaces/imodel.html#findone",children:"findOne"}),", defined ",(0,t.jsx)(n.a,{href:"/docs/basic/schema.html#indexes",children:"indexes"})," or where ",(0,t.jsx)(n.a,{href:"/docs/basic/schema.html#statics",children:"static methods"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"User.find({ name: 'Jane' });\n// will return a list of all users with the name \"Jane\"\n\nUser.find({ name: 'Jane' }, { limit: 10 });\n// will return a list of all users with the name \"Jane\" and limited to 10 items\n\nUser.find({ name: {$eq: 'Jane', $ignoreCase: true }});\n// In some cases you need to compare without taking into account case sensitive, for this you can use the $ ignoreCase property: true\n\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"User.findOne({ name: 'Jane' });\n// will return a document with a User with the name \"Jane\" or null in case of not finding it\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"User.findById('userId');\n// will return the user document with the current id\n\nUser.findById('userId', { select: 'name, cards', populate: 'cards' });\n// will return the user document with the current id only with the fields name and cards populated\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The find options are: ",(0,t.jsx)(n.a,{href:"/docs/api/classes/findoptions.html#hierarchy",children:"link"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export interface IFindOptions {\n  skip?: number;\n  limit?: number;\n  sort?: Record<string, SortType>;\n  populate?: string | string[];\n  populateMaxDeep?: number;\n  select?: ISelectType[] | string | string[];\n  consistency?: SearchConsistency;\n  noCollection?: boolean;\n  lean?: boolean;\n  ignoreCase?: boolean;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"advanced-use-of-select-parameter",children:"Advanced Use of Select Parameter"}),"\n",(0,t.jsxs)(n.p,{children:["You can select nested objects using the structure defined in the N1QL Language documentation ",(0,t.jsx)(n.a,{href:"https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/constructionops.html",children:"Link"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"User.find({name: 'john'}, {select: '{\"latLon\": {geo.lat, geo.lon}, geo.lat} as geo  }'})\n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"advanced-use-of-filter-parameter",children:"Advanced Use of Filter Parameter"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const filter = {\n  $or: [{ price: { $gt: 'amount_val', $isNotNull: true } }, { auto: { $gt: 10 } }, { amount: 10 }],\n  $and: [\n    { price2: { $gt: 1.99, $isNotNull: true } },\n    { $or: [{ price3: { $gt: 1.99, $isNotNull: true } }, { id: '20' }] },\n  ],\n};\nUser.find(filter);\n// Returns a list of the elements that match the applied filters\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"use-of-ignorecase",children:["Use of ",(0,t.jsx)(n.code,{children:"ignoreCase"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Defining `User` schema\nconst userSchema = {\n  name: String,\n};\n// Some test documents\nconst user1 = { name: 'COUCHBASE' };\nconst user2 = { name: 'couchbase' };\n\n// Create and save `User` model\nconst UserModel = model('User', userSchema);\n\nawait UserModel.create(user1);\nawait UserModel.create(user2);\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Without ",(0,t.jsx)(n.code,{children:"ignoreCase"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const { rows: documents } = await UserModel.find({ name: { $eq: 'Couchbase' } }, { lean: true });\nconsole.log(`Documents: `, documents);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Will get:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"$> Documents:  []\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Using ",(0,t.jsx)(n.code,{children:"$ignoreCase"})," in filters params"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const { rows: documents } = await UserModel.find(\n    { name: { $eq: 'Couchbase', $ignoreCase: true } }, // Find filters\n    { lean: true } // Find options\n);\nconsole.log(`Documents: `, documents);\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Using ",(0,t.jsx)(n.code,{children:"ignoreCase"})," in find options"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const { rows: documents } = await UserModel.find(\n    { name: { $like: 'Couch%' } }, // Find filters\n    { lean: true, ignoreCase: true } // Find options\n);\n// Could also use:\nconst { rows: documents } = await UserModel.find(\n        { name: 'Couchbase' }, // Find filters\n        { lean: true, ignoreCase: true } // Find options\n);\nconsole.log(`Documents: `, documents);\n"})}),"\n",(0,t.jsx)(n.p,{children:"For the two previous examples will get something like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"$> Documents: [\n  {\n    _type: 'User',\n    id: 'da520506-11c3-4f66-b36c-6cb38d51fd16',\n    name: 'COUCHBASE'\n  },\n  {\n    _type: 'User',\n    id: '97a3b89e-9c2e-4a75-86d0-f83a5b6f3aa3',\n    name: 'couchbase'\n  }\n]\n"})}),"\n",(0,t.jsxs)(n.admonition,{title:"Note",type:"tip",children:[(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"ignoreCase"})," as part of find functions options will always prioritize the value of ",(0,t.jsx)(n.code,{children:"$ignoreCase"})," defined in the clause"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"UserModel.find([\n  { address: { $like: 'NY-%', $ignoreCase: false } }, // ignoreCase will not be applied\n  { name: 'John' } //  ignoreCase will be applied\n], { ignoreCase: true });\n"})})]}),"\n",(0,t.jsxs)(n.p,{children:["See the chapter on queries for more details on how to use the ",(0,t.jsx)(n.a,{href:"/docs/basic/query-builder",children:"Query"})," API."]}),"\n",(0,t.jsxs)(n.h3,{id:"use-of-lean",children:["Use of ",(0,t.jsx)(n.code,{children:"lean"})]}),"\n",(0,t.jsxs)(n.p,{children:["By default, Ottoman queries return an instance of the ",(0,t.jsx)(n.a,{href:"/docs/api/classes/document.html",children:"Ottoman Document class"}),". Documents have a lot of internal state for change tracking. Enabling the ",(0,t.jsx)(n.a,{href:"/docs/api/classes/findoptions.html#optional-lean",children:(0,t.jsx)(n.code,{children:"lean"})})," option tells Ottoman to skip instantiating a full Ottoman Document and just give you the plain old JavaScript object (POJO)."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"lean"})," feature is only for the documents (Models instances) query functions like ",(0,t.jsx)(n.a,{href:"/docs/api/interfaces/imodel.html#find",children:"find"}),", ",(0,t.jsx)(n.a,{href:"/docs/api/interfaces/imodel.html#findbyid",children:"findById"}),", ",(0,t.jsx)(n.a,{href:"/docs/api/interfaces/imodel.html#findone",children:"findOne"}),", etc."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const UserModel = model('User', schema);\nconst leanDoc = await UserModel.findById(id, { lean: true });\nconst normalDoc = await UserModel.findById(id);\n\n// In case you were wondering, the JSON form of a Ottoman document is the same\n// as the POJO. The lean option only affects how much memory your\n// Node.js process uses, not how much data is sent over the network.\nconsole.log(JSON.stringify(normalDoc).length === JSON.stringify(leanDoc).length); // true\n"})}),"\n",(0,t.jsx)(n.p,{children:"Under the hood, after executing a query, Ottoman converts the query results from POJOs to Ottoman Documents. If you turn on the lean option, Ottoman skips this step."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// with lean:true\nconsole.log(leanDoc instanceof UserModel); // false\nconsole.log(leanDoc instanceof Model); // false\nconsole.log(leanDoc instanceof Document); // false\nconsole.log(leanDoc instanceof Object); // true\nconsole.log(leanDoc.constructor.name === 'Object'); // true\n\n// with lean:false\nconsole.log(normalDoc instanceof UserModel); // true\nconsole.log(normalDoc instanceof Model); // true\nconsole.log(normalDoc instanceof Document); // true\nconsole.log(normalDoc instanceof Object); // true\nconsole.log(normalDoc.constructor.name === '_Model'); // true\n"})}),"\n",(0,t.jsxs)(n.admonition,{title:"NOTE",type:"tip",children:[(0,t.jsxs)(n.p,{children:["The downside of enabling ",(0,t.jsx)(n.code,{children:"lean"})," is that lean docs don't have:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Change tracking"}),"\n",(0,t.jsx)(n.li,{children:"Casting and validations"}),"\n",(0,t.jsx)(n.li,{children:"Hooks"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"save()"}),", ",(0,t.jsx)(n.code,{children:"remove()"})," and others ",(0,t.jsx)(n.code,{children:"model"}),"'s ",(0,t.jsx)(n.a,{href:"/docs/api/classes/model.html#methods-2",children:"methods"})]}),"\n"]}),(0,t.jsxs)(n.p,{children:["This is the main ",(0,t.jsx)(n.code,{children:"lean"})," feature difference when is applied over an Ottoman document"]})]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/api/classes/manyqueryresponse.html",children:"ManyQueryResponse"})," is an util class and doesn't have this ",(0,t.jsx)(n.code,{children:"lean"})," feature."]})}),"\n",(0,t.jsxs)(n.h3,{id:"use-lean-and--populate",children:["Use ",(0,t.jsx)(n.code,{children:"lean"})," and  ",(0,t.jsx)(n.code,{children:"populate"})]}),"\n",(0,t.jsxs)(n.p,{children:["If you use both ",(0,t.jsx)(n.code,{children:"populate"})," and ",(0,t.jsx)(n.code,{children:"lean"}),", the ",(0,t.jsx)(n.code,{children:"lean"})," option propagates to the populated documents as well. In the below example you can see it:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// Define schemas\nconst IssueSchema = new Schema({\n  title: String,\n  description: String,\n});\nconst CardSchema = new Schema({\n  cardNumber: String,\n  zipCode: String,\n  issues: [{ type: IssueSchema, ref: 'Issue' }],\n});\nconst CatSchema = new Schema({\n  name: String,\n  age: Number,\n});\nconst UserSchema = new Schema({\n  type: String,\n  isActive: Boolean,\n  name: String,\n  card: { type: CardSchema, ref: 'Card' },\n  cats: [{ type: CatSchema, ref: 'Cat' }],\n});\n\n// Create models\nconst Issue = model('Issue', IssueSchema);\nconst Card = model('Card', CardSchema);\nconst Cat = model('Cat', CatSchema);\nconst User = model('User', UserSchema);\n\n// Start Ottoman instance\nconst ottoman = getDefaultInstance();\nawait ottoman.start();\n\n// Initialize data\nconst issueDoc = await Issue.create({ title: 'stolen card' });\nconst cardDoc = await Card.create({\n  cardNumber: '4242 4242 4242 4242',\n  zipCode: '42424',\n  issues: [issueDoc.id],\n});\nconst cat1Doc = await Cat.create({ name: 'Figaro', age: 6 });\nconst cat2Doc = await Cat.create({ name: 'Garfield', age: 27 });\nconst userDoc = new User({\n  type: 'userPopulate',\n  isActive: false,\n  name: 'John Torvald',\n  card: cardDoc.id,\n  cats: [cat1Doc.id, cat2Doc.id]\n});\nconst saved = await userDoc.save();\n\n// Define query options\nconst options = { select: 'card, cats, name', populate: '*', lean: true };\n\n// Execute a lean=true query\nconst userWithLean = await User.findById(saved.id, options);\n\n// Execute a lean=false query\noptions.lean = false;\nconst userWithoutLean = await User.findById(saved.id, options);\n\nconsole.log(userWithLean);\nconsole.log(userWithoutLean);\n\nottoman.close();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["With ",(0,t.jsx)(n.code,{children:"lean"})," will get a POJO output:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"{\n  card: {\n    cardNumber: '4242 4242 4242 4242',\n    zipCode: '42424',\n    issues: [ '794f6771-6f8b-417d-a814-1b535176824f' ],\n    id: 'c725c1f5-68dc-4e3a-9b89-58ce52185f24',\n    _type: 'Card'\n  },\n  cats: [\n    {\n      name: 'Figaro',\n      age: 6,\n      id: '84fc7fca-6099-4299-a03a-286f7464457e',\n      _type: 'Cat'\n    },\n    {\n      name: 'Garfield',\n      age: 27,\n      id: '0acbb8f7-6771-4468-bd21-8de7739cadcb',\n      _type: 'Cat'\n    }\n  ],\n  name: 'John Torvald'\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Without ",(0,t.jsx)(n.code,{children:"lean"})," output:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"_Model {\n  card: _Model {\n    cardNumber: '4242 4242 4242 4242',\n    zipCode: '42424',\n    issues: [ '794f6771-6f8b-417d-a814-1b535176824f' ],\n    id: 'c725c1f5-68dc-4e3a-9b89-58ce52185f24',\n    _type: 'Card'\n  },\n  cats: [\n    _Model {\n      name: 'Figaro',\n      age: 6,\n      id: '84fc7fca-6099-4299-a03a-286f7464457e',\n      _type: 'Cat'\n    },\n    _Model {\n      name: 'Garfield',\n      age: 27,\n      id: '0acbb8f7-6771-4468-bd21-8de7739cadcb',\n      _type: 'Cat'\n    }\n  ],\n  name: 'John Torvald'\n}\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["If we try to call ",(0,t.jsx)(n.code,{children:"userWithLean.toJSON()"})," will get ",(0,t.jsx)(n.code,{children:"TypeError: userWithLean.toJSON is not a function"})]}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{title:"NOTE",type:"tip",children:[(0,t.jsx)(n.p,{children:"When document to populate does not exist, the corresponding id is kept:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Update user from above example\nawait User.updateById(saved.id, {\n  card: 'dummy-user-card-ID', // Reference card ID that does't not exist\n  cats: [\n    'dummy-user-cat-ID', // Reference cat ID that does't exist\n    ...saved.cats\n  ]\n});\n\n// Retrieving data\nuserWithLean = await User.findById(saved.id, options);\n\nconsole.log(userWithLean.card); // 'dummy-user-card-ID'\nconsole.log(userWithLean.cats[0]) ; // 'dummy-user-cat-ID'\n"})})]}),"\n",(0,t.jsxs)(n.h3,{id:"when-to-use-lean",children:["When to Use ",(0,t.jsx)(n.code,{children:"lean"})]}),"\n",(0,t.jsxs)(n.p,{children:["You should use ",(0,t.jsx)(n.code,{children:"lean"})," when:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["You're executing a query and sending the results without modification to, say, an ",(0,t.jsx)(n.a,{href:"http://expressjs.com/en/4x/api.html#res",children:"Express response"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"If you do not modify the query results and do not use custom getters."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["You should not use ",(0,t.jsx)(n.code,{children:"lean"})," when:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Need modify the query results or rely on features like getters or transforms."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Below is an example of an ",(0,t.jsx)(n.a,{href:"http://expressjs.com/en/guide/routing.html",children:"Express route"})," that is a good candidate for ",(0,t.jsx)(n.code,{children:"lean"}),". This route does not modify the ",(0,t.jsx)(n.code,{children:"person"})," document and doesn't rely on any Ottoman-specific functionality."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"app.get('/person/:id', function(req, res) {\n  Person.findById(req.params.id, { lean: true })\n    .then(person => res.json(person))\n    .catch(error => res.json({ error: error.message }));\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Below is an example of an Express route that should ",(0,t.jsx)(n.strong,{children:"not"})," use ",(0,t.jsx)(n.code,{children:"lean"}),". As a general rule of thumb, ",(0,t.jsx)(n.code,{children:"GET"})," routes are good candidates for ",(0,t.jsx)(n.code,{children:"lean"})," in a ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Representational_state_transfer",children:"RESTful API"}),". On the other hand, ",(0,t.jsx)(n.code,{children:"PUT"}),", ",(0,t.jsx)(n.code,{children:"POST"}),", etc. routes generally should not use ",(0,t.jsx)(n.code,{children:"lean"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// This route should **not** use `lean()`, because lean means no `save()`.\napp.put('/person/:id', function (req, res) {\n  Person.findOne(req.params.id).then(person => {\n    assert.ok(person);\n    Object.assign(person, req.body);\n    return person.save();\n  })\n    .then(person => res.json(person))\n    .catch(error => res.json({ error: error.message }));\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"deleting",children:"Deleting"}),"\n",(0,t.jsxs)(n.p,{children:["Models have static ",(0,t.jsx)(n.code,{children:"removeById()"})," function to remove documents matching the given id value.\nSee the ",(0,t.jsx)(n.a,{href:"/docs/api/interfaces/imodel.html#static-removebyid",children:"API"})," docs for more detail."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"User.removeById('userId');\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Models have static ",(0,t.jsx)(n.code,{children:"removeMany()"})," function to remove all documents matching the given condition.\nSee the ",(0,t.jsx)(n.a,{href:"/docs/api/interfaces/imodel.html#static-removemany",children:"API"})," docs for more detail."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"User.removeMany({ name: { $like: '%JohnDoe%' } });\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["The response status will be ",(0,t.jsx)(n.strong,{children:"SUCCESS"})," as long as no error occurs, otherwise it will be ",(0,t.jsx)(n.strong,{children:"FAILURE"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"updating",children:"Updating"}),"\n",(0,t.jsxs)(n.p,{children:["Each ",(0,t.jsx)(n.code,{children:"model"})," has its own ",(0,t.jsx)(n.code,{children:"updateById"})," method for modifying documents in the database without returning them to your application.\nSee the ",(0,t.jsx)(n.a,{href:"/docs/api/interfaces/imodel.html#static-updatebyid",children:"API"})," docs for more detail."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"User.updateById('userId', { age: 30 });\n// update document with id equal to 'userId' with age 30\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Models have static method ",(0,t.jsx)(n.code,{children:"replaceById"})," which has the same behavior as ",(0,t.jsx)(n.strong,{children:"updateById"}),", except that the replaceById replaces the existing document with the given document.\nSee the ",(0,t.jsx)(n.a,{href:"/docs/api/interfaces/imodel.html#static-replacebyid",children:"API"})," docs for more detail."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"User.replaceById('userId', { age: 30, name: 'John' });\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"The replaceById method completely replaces the existing document as long as the new document complies with the schema rules."})}),"\n",(0,t.jsxs)(n.p,{children:["Models have static ",(0,t.jsx)(n.code,{children:"updateMany"})," function to update all documents matching the given condition.\nSee the ",(0,t.jsx)(n.a,{href:"/docs/api/interfaces/imodel.html#static-updatemany",children:"API"})," docs for more detail."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"User.updateMany({ name: { $like: '%JohnDoe%' } }, { name: 'John' });\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["The response status will be ",(0,t.jsx)(n.strong,{children:"SUCCESS"})," as long as no error occurs, otherwise it will be ",(0,t.jsx)(n.strong,{children:"FAILURE"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["Models have static ",(0,t.jsx)(n.code,{children:"findOneAndUpdate"})," function to finds a document that matches the conditions of the collection and updates it.\nSee the ",(0,t.jsx)(n.a,{href:"/docs/api/interfaces/imodel.html#static-findoneandupdate",children:"API"})," docs for more detail."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"User.findOneAndUpdate({ name: { $like: '%John Doe%' } }, { name: 'John' }, { new: true, upsert: true });\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsxs)(n.p,{children:["By default the option ",(0,t.jsx)(n.strong,{children:"new"})," and ",(0,t.jsx)(n.strong,{children:"upsert"})," are ",(0,t.jsx)(n.strong,{children:"false"})]}),(0,t.jsxs)(n.p,{children:["If options.new is ",(0,t.jsx)(n.strong,{children:"true"})," return the document after update otherwise by default return the document before update."]}),(0,t.jsxs)(n.p,{children:["If options.upsert is ",(0,t.jsx)(n.strong,{children:"true"})," insert a document if the document does not exist."]})]}),"\n",(0,t.jsx)(n.h2,{id:"handling-multilpe-models",children:"Handling Multilpe Models"}),"\n",(0,t.jsxs)(n.p,{children:["When you create a new ",(0,t.jsx)(n.code,{children:"Model"})," Ottoman will register it by name."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const User = model('User', userSchema);\n\n// Ottoman under the hood will register in a dictionary object with a key set to model name\nconst models = {\n  User: UserModel,\n};\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"Duplicate Model's name will throw an exception notifying about the register model duplication."})}),"\n",(0,t.jsx)(n.h3,{id:"getting-existing-models",children:"Getting Existing Models"}),"\n",(0,t.jsxs)(n.p,{children:["You can retrieve a registered Model using the ",(0,t.jsx)(n.code,{children:"getModel"})," function."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { getModel, model } from 'ottoman';\n\nconst User = model('User', { name: string });\n\n// anywhere else in the app\nconst User = getModel('User');\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If the name provided doesn't match any registered model ",(0,t.jsx)(n.code,{children:"undefined"})," value will be returned."]}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)(n.p,{children:"Maybe you want to get an existing model and if it's don't exist then attempt to create, the next example could be helpful."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { getModel, model } from 'ottoman';\n\nconst User = getModel('User') || model('User', userSchema);\n"})})]}),"\n",(0,t.jsx)(n.h3,{id:"drop-collection",children:"Drop Collection"}),"\n",(0,t.jsxs)(n.p,{children:["Ottoman's ",(0,t.jsx)(n.code,{children:"Models"})," provide a ",(0,t.jsx)(n.code,{children:"dropCollection"})," static method to remove a collection."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"...\nconst User = model('User', schema, {scopeName: 'scopeA'});\n\n// dropCollection without parameter will drop it's own collection\n// This case User Collection in the scopeA will be removed\nUser.dropCollection()\n\n// dropCollection with collectionName parameter will drop the collection in the same scope\n// This case Cat Collection in the scopeA will be removed\nUser.dropCollection('Cat')\n\n// dropCollection can even drop a collection from another scope, if it's provide explicitly\n// This case Cat Collection in the scopeB will be removed\nUser.dropCollection('Cat', 'scopeB')\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To check the dropCollection API click ",(0,t.jsx)(n.a,{href:"/docs/api/interfaces/imodel.html#static-dropcollection",children:"here"})]}),"\n",(0,t.jsx)(n.h2,{id:"next-up",children:"Next Up"}),"\n",(0,t.jsxs)(n.p,{children:["Now that we've covered ",(0,t.jsx)(n.code,{children:"Models"}),", let's take a look at ",(0,t.jsx)(n.a,{href:"/docs/basic/document",children:"Documents"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var o=s(6540);const t={},i=o.createContext(t);function a(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);