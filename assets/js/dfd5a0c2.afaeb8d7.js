"use strict";(self.webpackChunkottoman_documentation=self.webpackChunkottoman_documentation||[]).push([[5536],{8162:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"advanced/ottoman","title":"Advanced Concepts","description":"This section will cover some advanced concepts and options in Ottoman.","source":"@site/docs/advanced/ottoman.md","sourceDirName":"advanced","slug":"/advanced/ottoman","permalink":"/docs/advanced/ottoman","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Advanced Concepts"},"sidebar":"tutorialSidebar","previous":{"title":"How Ottoman Works","permalink":"/docs/advanced/how-ottoman-works"},"next":{"title":"Mongoose to Ottoman","permalink":"/docs/advanced/mongoose-to-couchbase"}}');var s=o(4848),a=o(8453);const d={sidebar_position:2,title:"Advanced Concepts"},i="Advanced Concepts",c={},r=[{value:"Ottoman Configuration",id:"ottoman-configuration",level:2},{value:"PopulateMaxDeep Option",id:"populatemaxdeep-option",level:3},{value:"Shape the Solution",id:"shape-the-solution",level:4},{value:"Saving Documents",id:"saving-documents",level:4},{value:"Retrieving Documents with Populate",id:"retrieving-documents-with-populate",level:4}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"advanced-concepts",children:"Advanced Concepts"})}),"\n",(0,s.jsxs)(n.p,{children:["This section will cover some advanced concepts and options in ",(0,s.jsx)(n.code,{children:"Ottoman"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"ottoman-configuration",children:"Ottoman Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface OttomanConfig {\n  collectionName?: string;\n  scopeName?: string;\n  idKey?: string;\n  modelKey?: string;\n  populateMaxDeep?: number;\n  consistency?: SearchConsistency;\n  maxExpiry?: number;\n  keyGenerator?: (params: { metadata: ModelMetadata }) => string;\n  keyGeneratorDelimiter?: string;\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"collectionName"}),": Store value to use for each Model if not provided. Default: Model's name"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"scopeName"}),": Store value to use for each Model if not provided. Default: ",(0,s.jsx)(n.code,{children:"_default"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"idKey"}),": Value of the key to save your ",(0,s.jsx)(n.strong,{children:"id"}),". Default: Document's ",(0,s.jsx)(n.code,{children:"id"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"modelKey"}),": Key to store the model name into the document. Default: ",(0,s.jsx)(n.code,{children:"_type"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"populateMaxDeep"}),": Numeric Value for how many levels deep you want to ",(0,s.jsx)(n.em,{children:"_populate"}),". Default: ",(0,s.jsx)(n.code,{children:"1"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"consistency"}),": Value for ",(0,s.jsx)(n.em,{children:"Search Consistency Strategy"}),". Default: ",(0,s.jsx)(n.code,{children:"SearchConsistency.NONE"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"maxExpiry"}),": Numeric value (based in Milliseconds) used to create a collection for this instance. Default: ",(0,s.jsx)(n.code,{children:"300000"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"keyGenerator"}),": Function to generate the key to store documents. Default: ",(0,s.jsx)(n.code,{children:"(params: { metadata: ModelMetadata }) => string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"keyGeneratorDelimiter"}),": String value used to build the document key. Default: ",(0,s.jsx)(n.code,{children:"::"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["A complete new section is available to show how the ",(0,s.jsx)(n.a,{href:"/docs/advanced/how-ottoman-works.html#key-generation-layer",children:"key-generation-layer"})," works."]}),"\n",(0,s.jsx)(n.h3,{id:"populatemaxdeep-option",children:"PopulateMaxDeep Option"}),"\n",(0,s.jsxs)(n.p,{children:["This option sets the default value for the population. The default value is ",(0,s.jsx)(n.code,{children:"1"}),". This number will be the number of times ",(0,s.jsx)(n.code,{children:"Ottoman"})," will go deeper populating the ",(0,s.jsx)(n.code,{children:"document"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"shape-the-solution",children:"Shape the Solution"}),"\n",(0,s.jsxs)(n.p,{children:["Let's see a whole example to show how to populate and populateMaxDeep option works using ",(0,s.jsx)(n.code,{children:"ReferenceType"}),":\nWe'll go to create Address, Person, Company ",(0,s.jsx)(n.code,{children:"Models"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Schema, model } from 'ottoman';\n\nconst addressSchema = new Schema({\n  address: String\n})\n\nconst personSchema = Schema({\n  name: String,\n  age: Number,\n  address: { type: addressSchema, ref: 'Address'}\n});\n\nconst companySchema = Schema({\n  president: { type: personSchema, ref: 'Person' },\n  ceo: { type: personSchema, ref: 'Person' },\n  name: String,\n  workers: [{ type: personSchema, ref: 'Person' }]\n});\n\nconst Address = model('Address', addressSchema);\nconst Story = model('Story', storySchema);\nconst Company = model('Company', companySchema);\n"})}),"\n",(0,s.jsxs)(n.p,{children:['In the example above, we define a "Schema" for the company that uses the "Person" schema to define "president" and "workers" and the person scheme uses the address Schema in turn. A reference representation of the modeling might be ',(0,s.jsx)(n.code,{children:"Company -> Person -> Address"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"saving-documents",children:"Saving Documents"}),"\n",(0,s.jsx)(n.p,{children:"Now we are going to create a new Company with John Smith as President and Jane Doe as CEO."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const johnAddress = new Address({address: '13 Washington Square S, New York, NY 10012, USA'});\nawait address.save();\n\nconst john = new Person({name: 'John Smith', age: 52, address: johnAddress});\nawait john.save();\n\nconst janeAddress = new Address({address: '55 Clark St, Brooklyn, NY 11201, USA'});\nawait address.save();\n\nconst jane = new Person({name: 'Jane Doe', age: 45, address: janeAddress});\nawait jane.save();\n\nconst spaceX = new Company({name: 'Space X', president: john, ceo: jane})\nawait spaceX.save()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["These few lines of code create the ",(0,s.jsx)(n.code,{children:"Space X"})," company. Notice how we use the ReferenceType to create\nrelations between our models."]}),"\n",(0,s.jsx)(n.h4,{id:"retrieving-documents-with-populate",children:"Retrieving Documents with Populate"}),"\n",(0,s.jsxs)(n.p,{children:["We already have the ",(0,s.jsx)(n.code,{children:"Space X"})," company saved, let's see how we can retrieve it"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// this line of code will quere db for the Space X company\nconst spaceX = await Company.findOne({name: 'Space X'});\n"})}),"\n",(0,s.jsx)(n.p,{children:"The result should look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "id": "2454353-34543-34534534",\n  "name": "Space X",\n  "president": "123456-1234-12345",\n  "ceo": "654321-4321-54321"\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Notice: The ",(0,s.jsx)(n.code,{children:"president"})," and ",(0,s.jsx)(n.code,{children:"ceo"})," field don't have the data, they are just saving a reference to the data in the ",(0,s.jsx)(n.code,{children:"Person"})," collection"]}),"\n",(0,s.jsxs)(n.p,{children:["If we want to get the data reference for the ",(0,s.jsx)(n.code,{children:"president"})," and ",(0,s.jsx)(n.code,{children:"ceo"})," fields we need to use the ",(0,s.jsx)(n.code,{children:"populate"})," feature."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// first we need to Space X company\nconst spaceX = await Company.findOne({name: 'Space X'});\n\n// now we will use _populate function to populate the references\nawait spaceX._populate('*')\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["The '_populate' function will receive 1 or many field names separate by a comma to know\nthe field to populate or just use the ",(0,s.jsx)(n.code,{children:"*"})," wildcard to populate all references in the document,\nas we showed in the above example. If you want just to populate the ",(0,s.jsx)(n.code,{children:"ceo"})," field for example you\njust need to write this line instead ",(0,s.jsx)(n.code,{children:"await spaceX._populate('ceo')"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"The result should look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "id": "2454353-34543-34534534",\n  "name": "Space X",\n  "president": {\n    "id": "123456-1234-12345",\n    "name": "John Smith",\n    "age": 52,\n    "address": "34215-7645-87906"\n  },\n  "ceo": {\n    "id": "654321-4321-54321",\n    "name": "Jane Doe",\n    "age": 45,\n    "address": "10032-7645-87906"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["As you can see we retrieved successfully the data for the ",(0,s.jsx)(n.code,{children:"president"})," and ",(0,s.jsx)(n.code,{children:"ceo"})," fields, but if you look\ncloser the address field inside them still have a reference to the address, due to we have 3 level\nof nested ",(0,s.jsx)(n.code,{children:"Schemas"}),", for a case like this, we can use the ",(0,s.jsx)(n.code,{children:"populateMaxDeep"})," option, the default value is 1,\nthis means that only the field in the first level will be populated even if we use the ",(0,s.jsx)(n.code,{children:"*"})," wildcard,\nthis wildcard is only to notified the fields to populate not the deep of the search if we use nested ",(0,s.jsx)(n.code,{children:"Schemas"})," and want to ",(0,s.jsx)(n.code,{children:"Ottoman"})," handle the population we need to use the ",(0,s.jsx)(n.code,{children:"populateMaxDeep"})," option. Let's see how it work."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// first we need to Space X company\nconst spaceX = await Company.findOne({name: 'Space X'});\n\n// now we will use _populate function to populate the references\nawait spaceX._populate('*', 2)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"_populate"})," function accepts a second argument to define ",(0,s.jsx)(n.code,{children:"populateMaxDeep"})," if we set it to look deep for 2 level\nthe result will be:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "id": "2454353-34543-34534534",\n  "name": "Space X",\n  "president": {\n    "id": "123456-1234-12345",\n    "name": "John Smith",\n    "age": 52,\n    "address": {\n      "id": "34215-7645-87906",\n      "address": "13 Washington Square S, New York, NY 10012, USA"\n    }\n  },\n  "ceo": {\n    "id": "654321-4321-54321",\n    "name": "Jane Doe",\n    "age": 45,\n    "address": {\n      "id": "10032-7645-87906",\n      "address": "55 Clark St, Brooklyn, NY 11201, USA"\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Congratulations! You retrieve the entire ",(0,s.jsx)(n.code,{children:"Space X"})," data, from the nested Schemas ",(0,s.jsx)(n.code,{children:"Company -> Person -> Address"})," design."]}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.mdxAdmonitionTitle,{children:["Rewriting ",(0,s.jsx)(n.code,{children:"populateMaxDeep"})]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"populateMaxDeep"})," option is set to 1, as we can see in the previous example, but you can override it when creating the\n",(0,s.jsx)(n.code,{children:"Ottoman"})," instance."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const ottoman = new Ottoman({populateMaxDeep: 5});\n\n...\n\n// will populate 5 level down from nested references\nawait spaceX._populate('*')\n"})}),(0,s.jsxs)(n.p,{children:["This way every ",(0,s.jsx)(n.code,{children:"_populate"})," function will try to populate documents 5 levels deep instead of just 1 default and recommended value. Populations are one of the more expensive operations in Databases as a general concept, try to avoid high numbers in ",(0,s.jsx)(n.code,{children:"populateMaxDeep"}),". Ottoman takes advantage of key/value operation to execute populate to reduce the query times as much as possible."]})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>i});var t=o(6540);const s={},a=t.createContext(s);function d(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);