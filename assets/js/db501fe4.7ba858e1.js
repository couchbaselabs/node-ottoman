"use strict";(self.webpackChunkottoman_documentation=self.webpackChunkottoman_documentation||[]).push([[577],{3905:(e,o,t)=>{t.d(o,{Zo:()=>m,kt:()=>u});var n=t(67294);function a(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function l(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);o&&(n=n.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?l(Object(t),!0).forEach((function(o){a(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function i(e,o){if(null==e)return{};var t,n,a=function(e,o){if(null==e)return{};var t,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],o.indexOf(t)>=0||(a[t]=e[t]);return a}(e,o);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var r=n.createContext({}),c=function(e){var o=n.useContext(r),t=o;return e&&(t="function"==typeof e?e(o):s(s({},o),e)),t},m=function(e){var o=c(e.components);return n.createElement(r.Provider,{value:o},e.children)},g={inlineCode:"code",wrapper:function(e){var o=e.children;return n.createElement(n.Fragment,{},o)}},d=n.forwardRef((function(e,o){var t=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=c(t),u=a,p=d["".concat(r,".").concat(u)]||d[u]||g[u]||l;return t?n.createElement(p,s(s({ref:o},m),{},{components:t})):n.createElement(p,s({ref:o},m))}));function u(e,o){var t=arguments,a=o&&o.mdxType;if("string"==typeof e||a){var l=t.length,s=new Array(l);s[0]=d;var i={};for(var r in o)hasOwnProperty.call(o,r)&&(i[r]=o[r]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<l;c++)s[c]=t[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},57613:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>r,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=t(87462),a=(t(67294),t(3905));const l={},s="Mongoose to Ottoman",i={unversionedId:"advanced/mongoose-to-couchbase",id:"advanced/mongoose-to-couchbase",title:"Mongoose to Ottoman",description:"Migrate MongoDB to Couchbase",source:"@site/docs/advanced/mongoose-to-couchbase.md",sourceDirName:"advanced",slug:"/advanced/mongoose-to-couchbase",permalink:"/docs/advanced/mongoose-to-couchbase",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Advanced Concepts",permalink:"/docs/advanced/ottoman"},next:{title:"Ottoman for Couchbase Node.js SDK developers",permalink:"/docs/advanced/ottoman-couchbase"}},r={},c=[{value:"Moving Data from MongoDB to Couchbase",id:"moving-data-from-mongodb-to-couchbase",level:2},{value:"Defining Schema",id:"defining-schema",level:2},{value:"Mongoose",id:"mongoose",level:4},{value:"Ottoman",id:"ottoman",level:4},{value:"Creating Model",id:"creating-model",level:2},{value:"Mongoose",id:"mongoose-1",level:4},{value:"Ottoman",id:"ottoman-1",level:4},{value:"Connection and Save Model Instance",id:"connection-and-save-model-instance",level:2},{value:"Mongoose",id:"mongoose-2",level:4},{value:"Ottoman",id:"ottoman-2",level:4},{value:"Instance Methods",id:"instance-methods",level:2},{value:"Mongoose",id:"mongoose-3",level:4},{value:"Ottoman",id:"ottoman-3",level:4},{value:"Statics",id:"statics",level:2},{value:"Mongoose",id:"mongoose-4",level:4},{value:"Ottoman",id:"ottoman-4",level:4},{value:"Querying",id:"querying",level:2},{value:"Mongoose",id:"mongoose-5",level:4},{value:"Ottoman",id:"ottoman-5",level:4},{value:"Deleting",id:"deleting",level:2},{value:"Mongoose",id:"mongoose-6",level:4},{value:"Ottoman",id:"ottoman-6",level:4},{value:"Updating",id:"updating",level:2},{value:"Mongoose",id:"mongoose-7",level:4},{value:"Ottoman",id:"ottoman-7",level:4}],m={toc:c};function g(e){let{components:o,...l}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,l,{components:o,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mongoose-to-ottoman"},"Mongoose to Ottoman"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Migrate MongoDB to Couchbase",src:t(29838).Z,width:"1024",height:"408"})),(0,a.kt)("h2",{id:"moving-data-from-mongodb-to-couchbase"},"Moving Data from MongoDB to Couchbase"),(0,a.kt)("p",null,"In ",(0,a.kt)("a",{parentName:"p",href:"https://blog.couchbase.com/migrating-data-from-mongodb-to-couchbase/"},"this post")," you will find an extensive explanation that allow you to export the MongoDB data structure, import to Couchbase and make some basic transformations on those documents."),(0,a.kt)("p",null,"In the following sections we will be looking at some examples of homologous codes between Mongoose and Ottoman that can be useful in the migration process."),(0,a.kt)("h2",{id:"defining-schema"},"Defining Schema"),(0,a.kt)("p",null,"Everything in Ottoman and Mongoose starts with a Schema."),(0,a.kt)("h4",{id:"mongoose"},"Mongoose"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import mongoose from 'mongoose';\nconst { Schema } = mongoose;\n\nconst blogSchema = new Schema({\n  title: { type: String },\n  author: String, // String is shorthand for { type: String }\n  body:   String,\n  comments: [{ body: String, date: Date }],\n  date: { type: Date, default: Date.now },\n  hidden: Boolean,\n  meta: {\n    votes: { type: Number, min: 0, max: 5 },\n    favs:  Number\n  }\n});\n")),(0,a.kt)("h4",{id:"ottoman"},"Ottoman"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Schema } from 'ottoman';\n\nconst blogSchema = new Schema({\n  title: { type: String },\n  author: String, // String is shorthand for { type: String }\n  body: String,\n  comments: [{ body: String, date: Date }],\n  date: { type: Date, default: Date.now },\n  hidden: Boolean,\n  status: { type: String, enum: ['Close', 'Open', 'Review'] },\n  meta: {\n    votes: { type: Number, min: 0, max: 5 },\n    favs: Number,\n  }\n});\n")),(0,a.kt)("h2",{id:"creating-model"},"Creating Model"),(0,a.kt)("h4",{id:"mongoose-1"},"Mongoose"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const Blog = mongoose.model('Blog', blogSchema);\n")),(0,a.kt)("h4",{id:"ottoman-1"},"Ottoman"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { model } from 'ottoman';\n\nconst Blog = model('Blog', blogSchema);\n")),(0,a.kt)("h2",{id:"connection-and-save-model-instance"},"Connection and Save Model Instance"),(0,a.kt)("h4",{id:"mongoose-2"},"Mongoose"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { connect } from 'mongoose';\n\nasync function createBlog() {\n  await connect('mongodb://localhost:27017/test');\n\n  const blog = new Blog({ name: 'Jane Doe' });\n\n  try {\n    const newBlog = await blog.save();\n    console.log(`Blog '${ newBlog.title }' successfully created`);\n  }\n  catch (e) {\n    console.log(`ERROR: ${e.message}`);\n  }\n}\n\ncreateBlog();\n")),(0,a.kt)("h4",{id:"ottoman-2"},"Ottoman"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { connect, start, close } from 'ottoman';\n\nasync function createBlog() {\n    const connection = await connect('couchbase://localhost/travel-sample@Administrator:password');\n    const blog = new Blog({ name: 'Jane Doe' });\n\n    try {\n        await start();\n        const newBlog = await blog.save();\n        await close();\n        console.log(`Blog '${ newBlog.title }' successfully created`);\n    }\n    catch (e) {\n        console.log(`ERROR: ${e.message}`);\n    }\n}\n\ncreateBlog();\n")),(0,a.kt)("h2",{id:"instance-methods"},"Instance Methods"),(0,a.kt)("h4",{id:"mongoose-3"},"Mongoose"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"blogSchema.methods.findSimilarTypes = function(cb) {\n  return mongoose.model('Blog').find({ type: this.type }, cb);\n};\n\n// Now all of our blogs instances have a findSimilarTypes method available to them.\nconst BlogModel = mongoose.model('Blog', blogSchema);\nconst newBlog = new BlogModel({ title: 'Blog title' });\n\nconst blogs = await newBlog.findSimilarTypes();\nconsole.log(blogs);\n")),(0,a.kt)("h4",{id:"ottoman-3"},"Ottoman"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"blogSchema.methods.findSimilarTypes = function() {\n  return connection.getModel('Blog').find({ type: this.type });\n};\n\n// Now all of our blogs instances have a findSimilarTypes method available to them.\nconst BlogModel = model('Blog', blogSchema);\nconst newBlog = new BlogModel({ title: 'Blog title' });\n\nconst blogs = await newBlog.findSimilarTypes();\nconsole.log(blogs);\n")),(0,a.kt)("h2",{id:"statics"},"Statics"),(0,a.kt)("h4",{id:"mongoose-4"},"Mongoose"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"blogSchema.statics.findByTitle = function(title) {\n  return this.find({ title: title });\n};\n\nconst BlogModel = mongoose.model('Blog', blogSchema);\nconst blogs = await BlogModel.findByTitle(`Some blog's title`);\n")),(0,a.kt)("h4",{id:"ottoman-4"},"Ottoman"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"blogSchema.statics.findByTitle = function(title) {\n  return this.find({ title: title });\n};\n\nconst BlogModel = model('Blog', blogSchema);\nconst blogs = await BlogModel.findByTitle(`Some blog's title`);\n")),(0,a.kt)("h2",{id:"querying"},"Querying"),(0,a.kt)("h4",{id:"mongoose-5"},"Mongoose"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"BlogModel.find({ title: `Some blog's title` }).exec(callback);\n")),(0,a.kt)("h4",{id:"ottoman-5"},"Ottoman"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const response = await BlogModel.find({ title: `Some blog's title` });\n")),(0,a.kt)("h2",{id:"deleting"},"Deleting"),(0,a.kt)("h4",{id:"mongoose-6"},"Mongoose"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"BlogModel.findByIdAndDelete('id');\n")),(0,a.kt)("h4",{id:"ottoman-6"},"Ottoman"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const response = await BlogModel.removeById('id');\n")),(0,a.kt)("h2",{id:"updating"},"Updating"),(0,a.kt)("h4",{id:"mongoose-7"},"Mongoose"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"BlogModel.updateOne({ title: `Some blog's title` }, { title: 'New Blog title' }, cb);\n")),(0,a.kt)("h4",{id:"ottoman-7"},"Ottoman"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const response = await BlogModel.findOneAndUpdate({ title: `Some blog's title` }, { title: 'New Blog title' });\n")))}g.isMDXComponent=!0},29838:(e,o,t)=>{t.d(o,{Z:()=>n});const n=t.p+"assets/images/mongodb-to-couchbase-37a3b7b42478d45f635069022e4a362f.jpg"}}]);