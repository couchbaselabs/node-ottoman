"use strict";(self.webpackChunkottoman_documentation=self.webpackChunkottoman_documentation||[]).push([[2814],{1953:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"quick-start","title":"Quickstart","description":"Before we get started with Ottoman and Node JS, we need to ensure you have Couchbase up and running.","source":"@site/docs/quick-start.md","sourceDirName":".","slug":"/quick-start","permalink":"/docs/quick-start","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":-4,"frontMatter":{"sidebar_position":-4,"title":"Quickstart"},"sidebar":"tutorialSidebar","previous":{"title":"Intoduction","permalink":"/docs/intro"},"next":{"title":"Schemas","permalink":"/docs/basic/schema"}}');var o=t(4848),a=t(8453);const r={sidebar_position:-4,title:"Quickstart"},i="Quick Start with Ottoman v2",c={},d=[{value:"Prerequisites: Three Steps required to Query our Bucket",id:"prerequisites-three-steps-required-to-query-our-bucket",level:2},{value:"Create the Ottoman NodeJS Project",id:"create-the-ottoman-nodejs-project",level:2},{value:"Connecting to a Couchbase Bucket",id:"connecting-to-a-couchbase-bucket",level:2},{value:"Creating an Ottoman Model",id:"creating-an-ottoman-model",level:2},{value:"Create New User Documents",id:"create-new-user-documents",level:2},{value:"Persist Documents to Our Bucket",id:"persist-documents-to-our-bucket",level:2},{value:"Write a Query with Ottoman\u2019s Query API",id:"write-a-query-with-ottomans-query-api",level:2},{value:"Summary",id:"summary",level:2},{value:"Exercise Complete",id:"exercise-complete",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"quick-start-with-ottoman-v2",children:"Quick Start with Ottoman v2"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Before we get started with Ottoman and Node JS, we need to ensure you have Couchbase up and running.\nWe will create a data bucket and two indexes for basic queries. Using Couchbase\u2019s N1QL query syntax,\nwe will create two indexes, a primary and adaptive index.\nAfter we upsert our records, these indexes will allow us to look up our documents with the Query API in Ottoman"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites-three-steps-required-to-query-our-bucket",children:"Prerequisites: Three Steps required to Query our Bucket"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Setup Couchbase Server 7.2 and ensure it is running."}),"\n",(0,o.jsx)(n.li,{children:'Create an empty bucket named "default".'}),"\n",(0,o.jsx)(n.li,{children:"Add a primary and adaptive index for our default bucket."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"If you still need to perform these tasks please use one of the following:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://docs.couchbase.com/tutorials/quick-start/quickstart-docker-image-manual-cb65.html",children:"5-minute Couchbase Docker Container Configuration"})}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{title:"The Recommended way is using the CLI",type:"tip",children:(0,o.jsxs)(n.p,{children:["The easiest way to start an Ottoman project is using the ",(0,o.jsx)(n.a,{href:"/docs/cli",children:"Ottoman CLI"})," tool,\nto autogenerate your project. The ",(0,o.jsx)(n.a,{href:"/docs/cli",children:"CLI"})," will setup and spin up a project in a few steps, ",(0,o.jsx)(n.a,{href:"/docs/cli",children:"check it here"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"create-the-ottoman-nodejs-project",children:"Create the Ottoman NodeJS Project"}),"\n",(0,o.jsxs)(n.p,{children:["In this exercise, we will be working with the ",(0,o.jsx)(n.a,{href:"https://github.com/couchbaselabs/node-ottoman",children:"Ottoman v2 ODM (Object Document Mapper)"}),"\nin conjunction with the ",(0,o.jsx)(n.a,{href:"https://docs.couchbase.com/nodejs-sdk/current/hello-world/start-using-sdk.html",children:"NodeJS SDK v3 and above"})]}),"\n",(0,o.jsx)(n.p,{children:"This tutorial was written using Node JS version 12.14, NPM version 6.13, and the Couchbase SDK 4, but higher version numbers should do."}),"\n",(0,o.jsx)(n.p,{children:"You can check your version numbers by running the following commands:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"node --version\nnpm --version\n"})}),"\n",(0,o.jsx)(n.admonition,{title:"Note",type:"tip",children:(0,o.jsxs)(n.p,{children:["You can get to the Couchbase Server Web UI at any time by visiting ",(0,o.jsx)(n.a,{href:"http://localhost:8091/",children:"localhost:8091"}),"."]})}),"\n",(0,o.jsxs)(n.p,{children:["Let\u2019s first create a project directory named ",(0,o.jsx)(n.code,{children:"first-query-ottoman"}),", change directories into that directory and initialize NPM:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mkdir first-query-ottoman\ncd first-query-ottoman\nnpm init\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now with a node package manager and manifest (",(0,o.jsx)(n.code,{children:"package.json"}),") in place, let\u2019s add Ottoman to our dependencies for the project:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install ottoman\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now we will create a file named ",(0,o.jsx)(n.code,{children:"server.js"})," and launch Visual Studio Code:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"touch server.js\ncode .\n"})}),"\n",(0,o.jsxs)(n.p,{children:["We have now set up a project directory and enabled npm, installed ",(0,o.jsx)(n.code,{children:"ottoman"}),",\ncreated a ",(0,o.jsx)(n.code,{children:"server.js"})," file, and finally opened up our VS Code editor to the project root."]}),"\n",(0,o.jsxs)(n.p,{children:["Open ",(0,o.jsx)(n.code,{children:"server.js"})," file, this is where we\u2019ll add our code."]}),"\n",(0,o.jsx)(n.p,{children:"Taking each code sample below, we will add each new block of code done after one another."}),"\n",(0,o.jsx)(n.h2,{id:"connecting-to-a-couchbase-bucket",children:"Connecting to a Couchbase Bucket"}),"\n",(0,o.jsx)(n.p,{children:"Create a connection to our Couchbase Server running in Docker.\nYour password may be different, just swap out yours if it is different."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const ottoman = require('ottoman');\n\nconst main = async () => {\n  await ottoman.connect({\n    connectionString: 'couchbase://localhost',\n    bucketName: 'default',\n    username: 'Administrator',\n    password: 'password'\n  });\n  \n  await ottoman.start();\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"creating-an-ottoman-model",children:"Creating an Ottoman Model"}),"\n",(0,o.jsxs)(n.p,{children:["Create a model for our ",(0,o.jsx)(n.code,{children:"User"}),' document.\nThis defines the expected structure of each document, and also which "Collection" Couchbase will store the documents in.']}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const User = ottoman.model('User', {\n  firstName: String,\n  lastName: String,\n  email: String,\n  tagline: String\n})\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Ottoman does support other data types like ",(0,o.jsx)(n.code,{children:"boolean"}),", ",(0,o.jsx)(n.code,{children:"number"}),", and ",(0,o.jsx)(n.code,{children:"Date"}),".\nA model can also define indexes, but for now, we will skip this,\nas we already set up indexes manually in the prerequisites."]}),"\n",(0,o.jsx)(n.h2,{id:"create-new-user-documents",children:"Create New User Documents"}),"\n",(0,o.jsx)(n.p,{children:"Now we will define a few documents that we want to persist to our bucket.\nWe are using the document structure that we defined in our model."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const perry = new User({\n  firstName: 'Perry',\n  lastName: 'Mason',\n  email: 'perry.mason@example.com',\n  tagLine : 'Who can we get on the case?'\n})\n\nconst tom = new User({\n  firstName: 'Major',\n  lastName: 'Tom',\n  email: 'major.tom@example.com',\n  tagLine : 'Send me up a drink'\n})\n"})}),"\n",(0,o.jsx)(n.h2,{id:"persist-documents-to-our-bucket",children:"Persist Documents to Our Bucket"}),"\n",(0,o.jsx)(n.p,{children:"So far we have simply defined the model structure and created documents locally."}),"\n",(0,o.jsxs)(n.p,{children:["Now that we want to persist the documents, all our interaction with the Couchbase server\nwill be done asynchronously, so we will call Ottoman's ",(0,o.jsx)(n.code,{children:"save()"})," method on each\nobject using the ",(0,o.jsx)(n.code,{children:"async"}),"/",(0,o.jsx)(n.code,{children:"await"})," technique."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"main = async () => {\n  ...\n  \n  await perry.save();\n  console.log(`success: user ${perry.firstName} added!`)\n\n  await tom.save();\n  console.log(`success: user ${tom.firstName} added!`)\n}\n\nmain();\n"})}),"\n",(0,o.jsx)(n.p,{children:"Now that we have added the code to save (persist) each record to the database, let\u2019s run our app for the first time with Node:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"node server.js\n"})}),"\n",(0,o.jsx)(n.p,{children:"You should get success messages in the console.\n(Note that the collection creation will happen only the first time you run the code.)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"collection created: _default/User\nsuccess: user Perry added!\nsuccess: user Major added!\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If we open our Web UI at ",(0,o.jsx)(n.a,{href:"http://localhost:8091/",children:"localhost:8091"}),' and navigate to the "Buckets" tab,\nwe can see that the ',(0,o.jsx)(n.code,{children:"User"})," collection, and two records have been added to the ",(0,o.jsx)(n.code,{children:"default"})," bucket."]}),"\n",(0,o.jsx)(n.admonition,{title:"Note",type:"tip",children:(0,o.jsx)(n.p,{children:'You can edit the document in place by clicking the pencil icon or remove them individually with the trash icon.\nYou can also edit the buckets and in the section "Advanced bucket settings" enable Flush. When flushed, all items in the bucket are removed.\nThis is a quick way to remove all documents.'})}),"\n",(0,o.jsx)(n.p,{children:"Let\u2019s remove these two documents, write some more code that will add the documents, and then turn around and query them."}),"\n",(0,o.jsx)(n.h2,{id:"write-a-query-with-ottomans-query-api",children:"Write a Query with Ottoman\u2019s Query API"}),"\n",(0,o.jsxs)(n.p,{children:["In Ottoman, we can retrieve records from our bucket using the adaptive index we have in place by calling the ",(0,o.jsx)(n.code,{children:"find()"})," method.\nAppend the ",(0,o.jsx)(n.code,{children:"find()"})," logic to our ",(0,o.jsx)(n.code,{children:"main"})," function."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"main = async () => {\n  //...saving users\n  const result = await User.find(\n    { lastName: 'Tom' },\n    { consistency: ottoman.SearchConsistency.LOCAL })\n  console.log('Query Result: ', result.rows)\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The first two arguments to the ",(0,o.jsx)(n.code,{children:"find()"})," method are ",(0,o.jsx)(n.code,{children:"filter"})," and ",(0,o.jsx)(n.code,{children:"options"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Instead of passing objects along as parameters,\nlet\u2019s write our code to define the filter and options as objects first and then pass them into the function as arguments."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"main = async () => {\n  //...saving users\n\n  const filter = { lastName: 'Tom' };\n  const options = { consistency: ottoman.SearchConsistency.LOCAL };\n  const result = await User.find(filter, options)\n}\n"})}),"\n",(0,o.jsx)(n.admonition,{title:"Note",type:"tip",children:(0,o.jsx)(n.p,{children:"If we had a lot more data and we were expecting hundreds of records to be returned,\nwe could page the results with our options to get the second page (pagination), like this:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const options = {\n  limit: 10,\n  skip: 10,\n  consistency: ottoman.SearchConsistency.LOCAL\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Let\u2019s run Node again and now we should get the same two success messages and an object returned to us that we queried for:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"node server.js\n"})}),"\n",(0,o.jsx)(n.p,{children:"You should see results similar to the following in your command line:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"success: user Perry added!\nsuccess: user Major added!\nQuery results:  [\n  {\n    _scope: '_default',\n    email: 'major.tom@acme.com',\n    firstName: 'Major',\n    id: '02374d71-6e4d-47f1-9cbe-54b487cec89b',\n    lastName: 'Tom',\n    tagLine: 'Send me up a drink',\n    type: 'User'\n  }\n]\n"})}),"\n",(0,o.jsx)(n.admonition,{title:"Note",type:"tip",children:(0,o.jsx)(n.p,{children:"In our case indexes were added manually, if not Ottoman would have given us this error message:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'"errors": [\n  {\n    "code": 4000,\n    "msg": "No index available on keyspace default that matches your query.\n     Use CREATE INDEX or CREATE PRIMARY INDEX to create an index,\n     or check that your expected index is online."\n  }\n]\n'})}),"\n",(0,o.jsx)(n.p,{children:":::details Here you can see the complete content of the server.js file."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const ottoman = require('ottoman');\n\nconst User = ottoman.model('User', {\n  firstName: String,\n  lastName: String,\n  email: String,\n  tagline: String\n})\n\nconst perry = new User({\n  firstName: 'Perry',\n  lastName: 'Mason',\n  email: 'perry.mason@example.com',\n  tagLine : 'Who can we get on the case?'\n})\n\nconst tom = new User({\n  firstName: 'Major',\n  lastName: 'Tom',\n  email: 'major.tom@example.com',\n  tagLine : 'Send me up a drink'\n})\n\nconst main = async () => {\n  await ottoman.connect({\n    connectionString: 'couchbase://localhost',\n    bucketName: 'default',\n    username: 'Administrator',\n    password: 'password'\n  });\n  \n  await ottoman.start();\n  \n  try {\n    await perry.save();\n    console.log(`success: user ${perry.firstName} added!`)\n\n    await tom.save();\n    console.log(`success: user ${tom.firstName} added!`)\n\n    const filter = { lastName: 'Tom' };\n    const options = { consistency: ottoman.SearchConsistency.LOCAL };\n\n    const result = await User.find(filter, options)\n    console.log('Query Result: ', result.rows)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nmain();\n"})}),"\n",(0,o.jsx)(n.p,{children:":::"}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(n.p,{children:["We have created models in Ottoman, defined some documents, and persisted them to the database.\nWe then subsequently looked them up using the built-in ",(0,o.jsx)(n.code,{children:"find()"})," method which used the Ottoman Query API for Couchbase.\nWe have not yet touched on indexes other than the fact that we created two of them during the docker and indexes section of the quickstart."]}),"\n",(0,o.jsxs)(n.p,{children:["If you would like to continue learning about Ottoman, we suggest checking out the ",(0,o.jsx)(n.a,{href:"http://ottomanjs.com/",children:"Ottoman Documentation"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"exercise-complete",children:"Exercise Complete"}),"\n",(0,o.jsx)(n.p,{children:"Congratulations! You have engaged with the world\u2019s most powerful JSON document database by using Ottoman."}),"\n",(0,o.jsxs)(n.p,{children:["Note that our query language N1QL was run under the hood too but we did not have to write any directly.\nYou can learn more about it with our ",(0,o.jsx)(n.a,{href:"https://query-tutorial.couchbase.com/tutorial",children:"N1QL Tutorial"}),"\nif you are interested in exploring our query language for Couchbase."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(6540);const o={},a=s.createContext(o);function r(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);