"use strict";(self.webpackChunkottoman_documentation=self.webpackChunkottoman_documentation||[]).push([[4845],{1772:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"advanced/transactions","title":"Transactions","description":"A practical guide on using Couchbase Distributed ACID transactions in Ottoman.","source":"@site/docs/advanced/transactions.md","sourceDirName":"advanced","slug":"/advanced/transactions","permalink":"/docs/advanced/transactions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0,"title":"Transactions"},"sidebar":"tutorialSidebar","previous":{"title":"Full Text Search","permalink":"/docs/advanced/fts"},"next":{"title":"How Ottoman Works","permalink":"/docs/advanced/how-ottoman-works"}}');var o=t(4848),i=t(8453);const s={sidebar_position:0,title:"Transactions"},c=void 0,r={},d=[{value:"Creating a Transaction",id:"creating-a-transaction",level:2},{value:"Transaction Syntax",id:"transaction-syntax",level:3},{value:"Handle Error",id:"handle-error",level:3},{value:"Concurrent Operations",id:"concurrent-operations",level:3},{value:"Non-Transactional Writes",id:"non-transactional-writes",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Ways of usage",id:"ways-of-usage",level:3},{value:"Examples",id:"examples",level:3},{value:"Save and retrieve a document inside a transaction, then check it was committed.",id:"save-and-retrieve-a-document-inside-a-transaction-then-check-it-was-committed",level:4},{value:"Bulk operations",id:"bulk-operations",level:4},{value:"Transactions with RefDoc Indexes",id:"transactions-with-refdoc-indexes",level:3},{value:"Additional Resources",id:"additional-resources",level:3}];function l(n){const e={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:"A practical guide on using Couchbase Distributed ACID transactions in Ottoman."}),"\n",(0,o.jsx)(e.p,{children:"This guide will show you examples of how to perform multi-document ACID (atomic, consistent, isolated, and durable)\ndatabase transactions within your application."}),"\n",(0,o.jsxs)(e.p,{children:["Refer to the ",(0,o.jsx)(e.a,{href:"https://docs.couchbase.com/nodejs-sdk/current/concept-docs/transactions.html",children:"Transaction Concepts"})," concept page for a high-level overview."]}),"\n",(0,o.jsxs)(e.admonition,{title:"Info",type:"info",children:[(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Notice:"})," Transactions support was added in ottoman version ",(0,o.jsx)(e.code,{children:"2.5.0"}),". Please update to ",(0,o.jsx)(e.code,{children:"2.5.0"})," or later to use transactions."]}),(0,o.jsx)(e.p,{children:"Ottoman's transactions implementation is intuitive and simple. If you already know how to use Ottoman, you can start working with transactions in no time."}),(0,o.jsx)(e.p,{children:"If not, please check the basics:"}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"/docs/basic/ottoman",children:"Ottoman"})," object"]}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/docs/basic/schema",children:"Schema"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/docs/basic/model",children:"Model"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/docs/basic/document",children:"Document"})}),"\n"]})]}),"\n",(0,o.jsx)(e.h2,{id:"creating-a-transaction",children:"Creating a Transaction"}),"\n",(0,o.jsx)(e.p,{children:"To create a transaction, an application must supply its logic inside an arrow function,\nincluding any conditional logic required. Once the arrow function has successfully run to completion,\nthe transaction will be automatically committed.\nIf at any point an error occurs, the transaction will rollback and the arrow function may run again."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"  const schema = new Schema({ name: String, age: Number });\n  const Swan = model('Swan', schema);\n  await start();\n  try {\n    await otttoman.$transactions(async (ctx: TransactionAttemptContext) => {\n      const odette = new Swan({ name: 'Odette', age: 30 });\n      await odette.save(false, { transactionContext: ctx });\n      // check the document was created in the transaction context\n      const doc = await Swan.findById(odette.id, { transactionContext: ctx });\n      console.log(doc);\n    });\n  } catch (error) {\n    if (error instanceof TransactionFailedError) {\n      console.error('Transaction did not reach commit point', error)\n    }\n\n    if (error instanceof TransactionCommitAmbiguousError) {\n      console.error('Transaction possibly committed', error)\n    }\n  }\n  // check the document was successfully committed\n  const doc = await Swan.findById(odette.id);\n  console.log(doc)\n"})}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"$transaction"})," arrow function gets passed a ",(0,o.jsx)(e.code,{children:"TransactionAttemptContext"})," object--generally referred to as ",(0,o.jsx)(e.code,{children:"ctx"})," in these examples.\nSince the arrow function could be rerun multiple times, it is important that it does not contain any side effects.\nIn particular, you should never perform regular operations on a Collection, such as ",(0,o.jsx)(e.code,{children:"create()"})," without using the ",(0,o.jsx)(e.code,{children:"ctx"}),", inside the arrow function.\nSuch operations may be performed multiple times, and will not be performed transactionally.\nInstead, you should perform these operations by using the ",(0,o.jsx)(e.code,{children:"{ transactionContext: ctx }"})," to pass the Transaction Context."]}),"\n",(0,o.jsx)(e.p,{children:"In the event that a transaction fails, your application could run into the following errors:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"TransactionCommitAmbiguousError"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"TransactionFailedError"})}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["Refer to ",(0,o.jsx)(e.a,{href:"https://docs.couchbase.com/nodejs-sdk/current/concept-docs/transactions-error-handling.html#transaction_errors",children:"Error Handling"})," for more details on these."]}),"\n",(0,o.jsx)(e.p,{children:"Methods that currently support transaction context:"}),"\n",(0,o.jsx)(e.p,{children:"Ottoman:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"query"})}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Model:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"count"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"find"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"findById"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"findOne"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"create"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"createMany"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"updateById"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"replaceById"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"updateMany"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"removeById"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"removeMany"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"findOneAndUpdate"})}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Document:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"save"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"remove"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"populate"})}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"transaction-syntax",children:"Transaction Syntax"}),"\n",(0,o.jsxs)(e.p,{children:["The syntax is pretty simple, just need to define the function to be run by ",(0,o.jsx)(e.code,{children:"$transaction"}),",\nthen you only need to use the ",(0,o.jsx)(e.code,{children:"ctx"})," parameter as an option for the operations inside the ",(0,o.jsx)(e.code,{children:"$transaction"})," function."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"await otttoman.$transactions(async (ctx: TransactionAttemptContext) => {\n  const odette = Swan.create({ name: 'Odette', age: 30 }, { transactionContext: ctx });\n})\n"})}),"\n",(0,o.jsx)(e.admonition,{title:"Tips",type:"tip",children:(0,o.jsxs)(e.p,{children:["The only change you need to add is always to pass the ",(0,o.jsx)(e.code,{children:"ctx"})," in the option ",(0,o.jsx)(e.code,{children:"transactionContext"})," inside ",(0,o.jsx)(e.code,{children:"$transaction"})," function,\nthis way the operation will know you intend to use it as a transaction, use it as a rule of thumbs up and you will be fine."]})}),"\n",(0,o.jsxs)(e.admonition,{title:"Pitfall",type:"warning",children:[(0,o.jsxs)(e.p,{children:["The ",(0,o.jsxs)(e.strong,{children:[(0,o.jsx)(e.code,{children:"{ transactionContext: ctx }"})," option ",(0,o.jsx)(e.em,{children:"must"})," be passed as a parameter when inside of a ",(0,o.jsx)(e.code,{children:"$transaction"})," function"]}),". Not passing this context will lead to unexpected results, and operations will not function as a transaction."]}),(0,o.jsx)(e.p,{children:"Keep a sharp eye on it!"})]}),"\n",(0,o.jsx)(e.h3,{id:"handle-error",children:"Handle Error"}),"\n",(0,o.jsxs)(e.p,{children:["While creating a transaction you always should wrap it inside a ",(0,o.jsx)(e.code,{children:"try catch"})," block and handle the exceptions."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"try {\n  await otttoman.$transactions(async (ctx: TransactionAttemptContext) => {\n    const odette = Swan.create({ name: 'Odette', age: 30 }, { transactionContext: ctx });\n  });\n} catch (error) {\n  if (error instanceof TransactionFailedError) {\n    console.error('Transaction did not reach commit point', error)\n  }\n\n  if (error instanceof TransactionCommitAmbiguousError) {\n    console.error('Transaction possibly committed', error)\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"concurrent-operations",children:"Concurrent Operations"}),"\n",(0,o.jsx)(e.p,{children:"The API allows operations to be performed concurrently inside a transaction, which can assist performance.\nThere are two rules the application needs to follow:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"The first mutation must be performed alone, in serial. This is because the first mutation also triggers the creation of metadata for the transaction."}),"\n",(0,o.jsx)(e.li,{children:"All concurrent operations must be allowed to complete fully, so the transaction can track which operations need to be rolled back in the event of failure. This means the application must 'swallow' the error, but record that an error occurred, and then at the end of the concurrent operations, if an error occurred, throw an error to cause the transaction to retry."}),"\n"]}),"\n",(0,o.jsx)(e.admonition,{title:"Note: Query Concurrency",type:"tip",children:(0,o.jsx)(e.p,{children:"Only one query statement will be performed by the Query service at a time. Non-blocking mechanisms can be used to perform multiple concurrent query statements, but this may result internally in some added network traffic due to retries, and is unlikely to provide any increased performance."})}),"\n",(0,o.jsx)(e.h3,{id:"non-transactional-writes",children:"Non-Transactional Writes"}),"\n",(0,o.jsx)(e.p,{children:"To ensure key-value performance is not compromised, and to avoid conflicting writes, applications should never perform non-transactional writes concurrently with transactional ones, on the same document."}),"\n",(0,o.jsxs)(e.p,{children:["See ",(0,o.jsx)(e.a,{href:"https://docs.couchbase.com/nodejs-sdk/current/concept-docs/transactions.html#concurrency-with-non-transactional-writes",children:"Concurrency with Non-Transactional Writes"})," to learn more."]}),"\n",(0,o.jsx)(e.h3,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(e.p,{children:"The default configuration should be appropriate for most use cases.\nTransactions can optionally be globally configured when configuring the Cluster.\nFor example, if you want to change the level of durability which that be attained,\nthis can be configured as part of the connect options:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { Ottoman } from 'ottoman';\n\nconst ottoman = new Ottoman();\n\nconst main = async () => {\n  await ottoman.connect({\n    connectionString: 'couchbase://localhost',\n    bucketName: 'travel-sample',\n    username: 'admin',\n    password: 'password',\n    transactions: {\n      durabilityLevel: DurabilityLevel.PersistToMajority,\n    },\n  });\n}\n\nmain();\n"})}),"\n",(0,o.jsxs)(e.p,{children:["The default configuration will perform all writes with the durability setting ",(0,o.jsx)(e.code,{children:"Majority"}),",\nensuring that each write is available in-memory on the majority of replicas before the transaction continues.\nThere are two higher durability settings available that will additionally wait for all mutations\nto be written to physical storage on either the active or the majority of replicas,\nbefore continuing. This further increases safety, at the cost of additional latency."]}),"\n",(0,o.jsx)(e.admonition,{title:"Caution",type:"warning",children:(0,o.jsxs)(e.p,{children:["A level of ",(0,o.jsx)(e.code,{children:"None"})," is present but its use is discouraged and unsupported.\nIf durability is set to ",(0,o.jsx)(e.code,{children:"None"}),", then ACID compliance is not guaranteed."]})}),"\n",(0,o.jsx)(e.h3,{id:"ways-of-usage",children:"Ways of usage"}),"\n",(0,o.jsxs)(e.p,{children:["Inside the ",(0,o.jsx)(e.code,{children:"$transaction"})," function you can do almost everything you can do with Ottoman, for instance:"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"K/V"})," Operations"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"N1QL"})," queries"]}),"\n",(0,o.jsxs)(e.li,{children:["Combinations between ",(0,o.jsx)(e.code,{children:"K/V"})," and ",(0,o.jsx)(e.code,{children:"N1QL"})]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(e.h4,{id:"save-and-retrieve-a-document-inside-a-transaction-then-check-it-was-committed",children:"Save and retrieve a document inside a transaction, then check it was committed."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"const schema = new Schema({ name: String, age: Number });\nconst Swan = model('Swan', schema);\nawait start();\ntry {\n  await otttoman.$transactions(async (ctx: TransactionAttemptContext) => {\n    const name = `Odette`;\n    const odette = new Swan({ name, age: 30 });\n    await odette.save(false, { transactionContext: ctx });\n    // check the document was created in the transaction context\n    const list = await Swan.find({ name: 'Odette' }, { transactionContext: ctx });\n  });\n} catch (e) {\n  // Error handling logic goes here.\n}\n// check the document was successfully committed\nconst list = await Swan.find({ name: 'Odette' }, { consistency: SearchConsistency.LOCAL });\n"})}),"\n",(0,o.jsx)(e.h4,{id:"bulk-operations",children:"Bulk operations"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"const schema = new Schema({ name: String, age: Number });\nconst Duck = model('Duck', schema);\nawait start();\ntry {\n  await otttoman.$transactions(async (ctx: TransactionAttemptContext) => {\n    const daisy = `Daisy`;\n    const donald = `Donald`;\n    const daffy = `Daffy`;\n    // create 3 documents in the current context\n    await Duck.createMany(\n      [\n        { name: daffy, age: 84 },\n        { name: donald, age: 84 },\n        { name: daisy, age: 84 },\n      ],\n      { transactionContext: ctx },\n    );\n    \n    // execute a count query to check the 3 documents were created in the context\n    const duckCount = await Duck.count({}, { transactionContext: ctx });\n    console.log(duckCount)\n    \n    // rename the documents with age = 84 to Daisy\n    await Duck.updateMany({ age: 84 }, { name: daisy }, { transactionContext: ctx });\n    \n    // query the list of documents to check they were updated as expected\n    const list = await Duck.find({ age: 84 }, { transactionContext: ctx });\n    console.log(list.rows)\n  });\n} catch (e) {\n  // Error handling logic goes here.\n}\n\n// query the list of documents to check they were updated and committed\nconst list = await Duck.find({ age: 84 }, { consistency: SearchConsistency.LOCAL });\nconsole.log(list.rows)\n"})}),"\n",(0,o.jsx)(e.h3,{id:"transactions-with-refdoc-indexes",children:"Transactions with RefDoc Indexes"}),"\n",(0,o.jsx)(e.admonition,{title:"Pitfall",type:"danger",children:(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"RefDoc Indexes are not currently supported with transactions."})," Avoid accessing or mutating schemas that are indexed with a RefDoc index within a transaction. Doing so will lead to unexpected results, and operations will not function as a transaction."]})}),"\n",(0,o.jsxs)(e.p,{children:["Any schema in your Ottoman project that is indexed with a ",(0,o.jsx)(e.a,{href:"/docs/basic/schema#refdoc",children:"RefDoc index"})," should ",(0,o.jsx)(e.strong,{children:"not be accessed or mutated within a transaction."})," For example, if the ",(0,o.jsx)(e.code,{children:"Swan"})," schema is indexed with a RefDoc index, the following code will work, but the transaction will not be atomic:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"await otttoman.$transactions(async (ctx: TransactionAttemptContext) => {\n  const odette = Swan.create({ name: 'Odette', age: 30 }, { transactionContext: ctx });\n})\n"})}),"\n",(0,o.jsxs)(e.p,{children:["It is acceptable to access ",(0,o.jsx)(e.em,{children:"other"})," schemas that are ",(0,o.jsx)(e.strong,{children:"not"})," indexed with a RefDoc index within a transaction. Ottoman will warn you if your project has ",(0,o.jsx)(e.strong,{children:"any"})," refdoc indexes when you attempt to use transactions, but it is up to you to ensure that you do not access or mutate these particular schemas within a transaction."]}),"\n",(0,o.jsx)(e.h3,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Check the Couchbase Node.JS SDK ",(0,o.jsx)(e.a,{href:"https://docs.couchbase.com/nodejs-sdk/current/howtos/distributed-acid-transactions-from-the-sdk.html",children:"transaction documentation"}),"."]}),"\n",(0,o.jsxs)(e.li,{children:["Learn more about ",(0,o.jsx)(e.a,{href:"https://docs.couchbase.com/nodejs-sdk/current/concept-docs/transactions.html",children:"Distributed ACID Transactions"}),"."]}),"\n",(0,o.jsxs)(e.li,{children:["Check out the SDK ",(0,o.jsx)(e.a,{href:"https://docs.couchbase.com/sdk-api/couchbase-node-client/index.html",children:"API Reference"}),"."]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>c});var a=t(6540);const o={},i=a.createContext(o);function s(n){const e=a.useContext(i);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);