"use strict";(self.webpackChunkottoman_documentation=self.webpackChunkottoman_documentation||[]).push([[6719],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},83003:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:4,title:"Documents"},l="Documents",i={unversionedId:"basic/document",id:"basic/document",title:"Documents",description:"Ottoman documents represent a one-to-one mapping to documents as stored in Couchbase Server. Each document is an instance of its Model.",source:"@site/docs/basic/document.md",sourceDirName:"basic",slug:"/basic/document",permalink:"/docs/basic/document",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Documents"},sidebar:"tutorialSidebar",previous:{title:"Models",permalink:"/docs/basic/model"},next:{title:"Ottoman Class",permalink:"/docs/basic/ottoman"}},s={},p=[{value:"Documents vs Models",id:"documents-vs-models",level:2},{value:"Retrieving",id:"retrieving",level:2},{value:"Updating",id:"updating",level:2},{value:"Validating",id:"validating",level:2},{value:"Populate",id:"populate",level:2},{value:"Saving Refs",id:"saving-refs",level:3},{value:"Using Population",id:"using-population",level:3},{value:"Checking Whether a Field is Populated",id:"checking-whether-a-field-is-populated",level:3},{value:"Advanced Population",id:"advanced-population",level:3},{value:"Next Up",id:"next-up",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"documents"},"Documents"),(0,o.kt)("p",null,"Ottoman ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/classes/document.html"},"documents")," represent a one-to-one mapping to documents as stored in Couchbase Server. Each document is an instance of its ",(0,o.kt)("a",{parentName:"p",href:"/docs/basic/model.html"},"Model"),"."),(0,o.kt)("h2",{id:"documents-vs-models"},"Documents vs Models"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/api/classes/document.html"},"Document")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/classes/model.html"},"Model")," are distinct classes in Ottoman. The Model class is a subclass of the Document class. When you use the Model constructor, you create a new document."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const MyModel = ottoman.model('Test', new Schema({ name: String }));\nconst doc = new MyModel();\n\ndoc instanceof MyModel; // true\ndoc instanceof ottoman.Model; // true\ndoc instanceof ottoman.Document; // true\n")),(0,o.kt)("p",null,"In Ottoman, a ",(0,o.kt)("inlineCode",{parentName:"p"},"document")," means an instance of a model. No need to create an instance of the Document class."),(0,o.kt)("h2",{id:"retrieving"},"Retrieving"),(0,o.kt)("p",null,"When you load documents from Couchbase Server using model functions like ",(0,o.kt)("inlineCode",{parentName:"p"},"findById()"),", you get an Ottoman ",(0,o.kt)("inlineCode",{parentName:"p"},"document")," back."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const doc = await MyModel.findOne();\n\ndoc instanceof MyModel; // true\ndoc instanceof ottoman.Model; // true\ndoc instanceof ottoman.Document; // true\n")),(0,o.kt)("h2",{id:"updating"},"Updating"),(0,o.kt)("p",null,"Ottoman documents track changes. You can modify a document using vanilla JavaScript assignments and Ottoman will convert it into Couchbase update operations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"doc.name = 'foo';\n\n// Ottoman sends an `updateById(doc.id, { name: 'foo' })`\n// to Couchbase Server.\nawait doc.save();\n")),(0,o.kt)("p",null,"If the document with the corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," is not found, Ottoman will report a ",(0,o.kt)("inlineCode",{parentName:"p"},"DocumentNotFoundError"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const doc = await MyModel.findOne();\n\n// Delete document so `save()` will throw. Ottoman cannot save.\nawait MyModel.removeById(doc._id);\n\ndoc.name = 'foo';\nawait doc.save(); // Throws `DocumentNotFoundError` on `save()`.\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"save()")," function is generally the right way to update a document with Ottoman. With ",(0,o.kt)("inlineCode",{parentName:"p"},"save()"),", you get full validation and middleware."),(0,o.kt)("h2",{id:"validating"},"Validating"),(0,o.kt)("p",null,"Documents are casted and validated before saved. Ottoman casts values to the specified type and then validates them. Internally, Ottoman calls the document's ",(0,o.kt)("inlineCode",{parentName:"p"},"_validate()")," ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/classes/model.html#validate"},"method")," before saving."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const schema = new Schema({ name: String, age: { type: Number, min: 0 } });\nconst Person = ottoman.model('Person', schema);\n\nlet p = new Person({ name: 'foo', age: 'bar' });\n// Cast to Number failed for value \"bar\" at path \"age\"\nawait p._validate();\n\nlet p2 = new Person({ name: 'foo', age: -1 });\n// Path `age` (-1) is less than minimum allowed value (0).\nawait p2._validate();\n")),(0,o.kt)("h2",{id:"populate"},"Populate"),(0,o.kt)("p",null,"Population is the process of automatically replacing the specified paths in a document using document(s) from other collection(s). We may populate a single document, multiple documents, a plain object, multiple plain objects, or all objects returned from a query."),(0,o.kt)("p",null,"Examples:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import {Schema, model} from 'ottoman';\n\nconst personSchema = new Schema({\n  name: String,\n  age: Number,\n  stories: [{ type: String, ref: 'Story' }]\n});\n\nconst storySchema = new Schema({\n  author: { type: String, ref: 'Person' },\n  title: String,\n  fans: [{ type: String, ref: 'Person' }]\n});\n\nconst Story = model('Story', storySchema);\nconst Person = model('Person', personSchema);\n")),(0,o.kt)("p",null,"So far we've created two ",(0,o.kt)("a",{parentName:"p",href:"/docs/basic/model.html"},"Models"),". Our ",(0,o.kt)("inlineCode",{parentName:"p"},"Person")," model has its ",(0,o.kt)("inlineCode",{parentName:"p"},"stories")," field set to an array of ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),"s.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"ref")," option is what tells Ottoman which model to use during population, in our case the ",(0,o.kt)("inlineCode",{parentName:"p"},"Story")," model. All ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),"s we store here must be document ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),"s from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Story")," model."),(0,o.kt)("h3",{id:"saving-refs"},"Saving Refs"),(0,o.kt)("p",null,"Saving refs to other documents works the same way you normally save properties, just assign the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const author = new Person({\n  name: 'Ian Fleming',\n  age: 50\n});\n\nawait author.save();\nconst story1 = new Story({\n  title: 'Casino Royale',\n  author: author.id    // assign the id from the person\n});\n\nawait story1.save()\n")),(0,o.kt)("h3",{id:"using-population"},"Using Population"),(0,o.kt)("p",null,"So far we haven't done anything much different. We've merely created a ",(0,o.kt)("inlineCode",{parentName:"p"},"Person")," and a ",(0,o.kt)("inlineCode",{parentName:"p"},"Story"),".\nNow let's take a look at populating our Story's ",(0,o.kt)("inlineCode",{parentName:"p"},"author"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Populate using document\nconst story = await Story.findById('storyId')\nawait story._populate('author');\nconsole.log('The author is %s', story.author.name);\n// prints \"The author is Ian Fleming\"\n\n\n// Populate using Model\nconst stories = await Story.find({ title: 'Casino Royale' }, {populate: 'author'})\nconst story = stories[0];\nconsole.log('The author is %s', story.author.name);\n    // prints \"The author is Ian Fleming\"\n")),(0,o.kt)("p",null,"Populated paths are no longer set to their original ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),", their value is replaced with the Ottoman document returned from the database by performing a separate query before returning the results."),(0,o.kt)("p",null,"Arrays of refs work the same way. Just call the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/classes/document.html#populate"},"_populate")," method on the query, and an array of documents will be returned ",(0,o.kt)("em",{parentName:"p"},"in place")," of the original ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),"s."),(0,o.kt)("p",null,"You can see more examples of pupulate ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/classes/document.html#populate"},"here"),"."),(0,o.kt)("h3",{id:"checking-whether-a-field-is-populated"},"Checking Whether a Field is Populated"),(0,o.kt)("p",null,"You can call the ",(0,o.kt)("inlineCode",{parentName:"p"},"_populated()")," function to check whether a field is populated. If ",(0,o.kt)("inlineCode",{parentName:"p"},"_populated()")," returns a ",(0,o.kt)("a",{parentName:"p",href:"https://masteringjs.io/tutorials/fundamentals/truthy"},"truthy value"),", you can assume the field is populated."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"story._populated('author'); // truthy\n\nstory._depopulate('author'); // Make `author` not populated anymore\nstory._populated('author'); // undefined\n")),(0,o.kt)("p",null,"A common reason for checking whether a path is populated is getting the ",(0,o.kt)("inlineCode",{parentName:"p"},"author.id"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"story._populated('author'); // truthy\nstory.author.id; \n\nstory._depopulate('author'); // Make `author` not populated anymore\nstory._populated('author'); // false\n")),(0,o.kt)("h3",{id:"advanced-population"},"Advanced Population"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"*")," as a wildcard to populate all references in the current model. In this example all properties types references will be populated:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"await story._populate('*');\n")),(0,o.kt)("p",null,"Also, you can automatically populate child document references by passing a second integer value to ",(0,o.kt)("inlineCode",{parentName:"p"},"_populate")," function,\nthis value will tell to Ottoman how many levels deep you want to populate."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Using on a document\nawait story._populate('*', 2);\n\n// Using on a Model\nconst stories = await Story.find({ title: 'Casino Royale' }, { populate: 'author', populateMaxDeep: 2 })\n")),(0,o.kt)("p",null,"In the above example Ottoman will populate all references on story and story's children.\nIt doesn't matter if they are single or array references."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Beware from setting a large integer value on populate ",(0,o.kt)("inlineCode",{parentName:"p"},"deep")," argument, it could affect the query performance.")),(0,o.kt)("h2",{id:"next-up"},"Next Up"),(0,o.kt)("p",null,"Now that we've covered Documents, let's take a look at ",(0,o.kt)("a",{parentName:"p",href:"/docs/basic/query-builder"},"Query Builder"),"."))}c.isMDXComponent=!0}}]);