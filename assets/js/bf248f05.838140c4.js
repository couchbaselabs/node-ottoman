"use strict";(self.webpackChunkottoman_documentation=self.webpackChunkottoman_documentation||[]).push([[5838],{8435:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"basic/document","title":"Documents","description":"Ottoman documents represent a one-to-one mapping to documents as stored in Couchbase Server. Each document is an instance of its Model.","source":"@site/docs/basic/document.md","sourceDirName":"basic","slug":"/basic/document","permalink":"/docs/basic/document","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Documents"},"sidebar":"tutorialSidebar","previous":{"title":"Models","permalink":"/docs/basic/model"},"next":{"title":"Ottoman Class","permalink":"/docs/basic/ottoman"}}');var a=t(4848),s=t(8453);const r={sidebar_position:4,title:"Documents"},i="Documents",l={},d=[{value:"Documents vs Models",id:"documents-vs-models",level:2},{value:"Retrieving",id:"retrieving",level:2},{value:"Updating",id:"updating",level:2},{value:"Validating",id:"validating",level:2},{value:"Populate",id:"populate",level:2},{value:"Saving Refs",id:"saving-refs",level:3},{value:"Using Population",id:"using-population",level:3},{value:"Checking Whether a Field is Populated",id:"checking-whether-a-field-is-populated",level:3},{value:"Advanced Population",id:"advanced-population",level:3},{value:"Next Up",id:"next-up",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"documents",children:"Documents"})}),"\n",(0,a.jsxs)(n.p,{children:["Ottoman ",(0,a.jsx)(n.a,{href:"/docs/api/classes/document.html",children:"documents"})," represent a one-to-one mapping to documents as stored in Couchbase Server. Each document is an instance of its ",(0,a.jsx)(n.a,{href:"/docs/basic/model.html",children:"Model"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"documents-vs-models",children:"Documents vs Models"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/docs/api/classes/document.html",children:"Document"})," and ",(0,a.jsx)(n.a,{href:"/docs/api/classes/model.html",children:"Model"})," are distinct classes in Ottoman. The Model class is a subclass of the Document class. When you use the Model constructor, you create a new document."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const MyModel = ottoman.model('Test', new Schema({ name: String }));\nconst doc = new MyModel();\n\ndoc instanceof MyModel; // true\ndoc instanceof ottoman.Model; // true\ndoc instanceof ottoman.Document; // true\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In Ottoman, a ",(0,a.jsx)(n.code,{children:"document"})," means an instance of a model. No need to create an instance of the Document class."]}),"\n",(0,a.jsx)(n.h2,{id:"retrieving",children:"Retrieving"}),"\n",(0,a.jsxs)(n.p,{children:["When you load documents from Couchbase Server using model functions like ",(0,a.jsx)(n.code,{children:"findById()"}),", you get an Ottoman ",(0,a.jsx)(n.code,{children:"document"})," back."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const doc = await MyModel.findOne();\n\ndoc instanceof MyModel; // true\ndoc instanceof ottoman.Model; // true\ndoc instanceof ottoman.Document; // true\n"})}),"\n",(0,a.jsx)(n.h2,{id:"updating",children:"Updating"}),"\n",(0,a.jsx)(n.p,{children:"Ottoman documents track changes. You can modify a document using vanilla JavaScript assignments and Ottoman will convert it into Couchbase update operations."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"doc.name = 'foo';\n\n// Ottoman sends an `updateById(doc.id, { name: 'foo' })`\n// to Couchbase Server.\nawait doc.save();\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If the document with the corresponding ",(0,a.jsx)(n.code,{children:"id"})," is not found, Ottoman will report a ",(0,a.jsx)(n.code,{children:"DocumentNotFoundError"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const doc = await MyModel.findOne();\n\n// Delete document so `save()` will throw. Ottoman cannot save.\nawait MyModel.removeById(doc._id);\n\ndoc.name = 'foo';\nawait doc.save(); // Throws `DocumentNotFoundError` on `save()`.\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"save()"})," function is generally the right way to update a document with Ottoman. With ",(0,a.jsx)(n.code,{children:"save()"}),", you get full validation and middleware."]}),"\n",(0,a.jsx)(n.h2,{id:"validating",children:"Validating"}),"\n",(0,a.jsxs)(n.p,{children:["Documents are casted and validated before saved. Ottoman casts values to the specified type and then validates them. Internally, Ottoman calls the document's ",(0,a.jsx)(n.code,{children:"_validate()"})," ",(0,a.jsx)(n.a,{href:"/docs/api/classes/model.html#validate",children:"method"})," before saving."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const schema = new Schema({ name: String, age: { type: Number, min: 0 } });\nconst Person = ottoman.model('Person', schema);\n\nlet p = new Person({ name: 'foo', age: 'bar' });\n// Cast to Number failed for value \"bar\" at path \"age\"\nawait p._validate();\n\nlet p2 = new Person({ name: 'foo', age: -1 });\n// Path `age` (-1) is less than minimum allowed value (0).\nawait p2._validate();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"populate",children:"Populate"}),"\n",(0,a.jsx)(n.p,{children:"Population is the process of automatically replacing the specified paths in a document using document(s) from other collection(s). We may populate a single document, multiple documents, a plain object, multiple plain objects, or all objects returned from a query."}),"\n",(0,a.jsx)(n.p,{children:"Examples:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import {Schema, model} from 'ottoman';\n\nconst personSchema = new Schema({\n  name: String,\n  age: Number,\n  stories: [{ type: String, ref: 'Story' }]\n});\n\nconst storySchema = new Schema({\n  author: { type: String, ref: 'Person' },\n  title: String,\n  fans: [{ type: String, ref: 'Person' }]\n});\n\nconst Story = model('Story', storySchema);\nconst Person = model('Person', personSchema);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["So far we've created two ",(0,a.jsx)(n.a,{href:"/docs/basic/model.html",children:"Models"}),". Our ",(0,a.jsx)(n.code,{children:"Person"})," model has its ",(0,a.jsx)(n.code,{children:"stories"})," field set to an array of ",(0,a.jsx)(n.code,{children:"id"}),"s.\nThe ",(0,a.jsx)(n.code,{children:"ref"})," option is what tells Ottoman which model to use during population, in our case the ",(0,a.jsx)(n.code,{children:"Story"})," model. All ",(0,a.jsx)(n.code,{children:"id"}),"s we store here must be document ",(0,a.jsx)(n.code,{children:"id"}),"s from the ",(0,a.jsx)(n.code,{children:"Story"})," model."]}),"\n",(0,a.jsx)(n.h3,{id:"saving-refs",children:"Saving Refs"}),"\n",(0,a.jsxs)(n.p,{children:["Saving refs to other documents works the same way you normally save properties, just assign the ",(0,a.jsx)(n.code,{children:"id"})," value:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const author = new Person({\n  name: 'Ian Fleming',\n  age: 50\n});\n\nawait author.save();\nconst story1 = new Story({\n  title: 'Casino Royale',\n  author: author.id    // assign the id from the person\n});\n\nawait story1.save()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"using-population",children:"Using Population"}),"\n",(0,a.jsxs)(n.p,{children:["So far we haven't done anything much different. We've merely created a ",(0,a.jsx)(n.code,{children:"Person"})," and a ",(0,a.jsx)(n.code,{children:"Story"}),".\nNow let's take a look at populating our Story's ",(0,a.jsx)(n.code,{children:"author"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Populate using document\nconst story = await Story.findById('storyId')\nawait story._populate('author');\nconsole.log('The author is %s', story.author.name);\n// prints \"The author is Ian Fleming\"\n\n\n// Populate using Model\nconst stories = await Story.find({ title: 'Casino Royale' }, {populate: 'author'})\nconst story = stories[0];\nconsole.log('The author is %s', story.author.name);\n    // prints \"The author is Ian Fleming\"\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Populated paths are no longer set to their original ",(0,a.jsx)(n.code,{children:"id"}),", their value is replaced with the Ottoman document returned from the database by performing a separate query before returning the results."]}),"\n",(0,a.jsxs)(n.p,{children:["Arrays of refs work the same way. Just call the ",(0,a.jsx)(n.a,{href:"/docs/api/classes/document.html#populate",children:"_populate"})," method on the query, and an array of documents will be returned ",(0,a.jsx)(n.em,{children:"in place"})," of the original ",(0,a.jsx)(n.code,{children:"id"}),"s."]}),"\n",(0,a.jsxs)(n.p,{children:["You can see more examples of pupulate ",(0,a.jsx)(n.a,{href:"/docs/api/classes/document.html#populate",children:"here"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"checking-whether-a-field-is-populated",children:"Checking Whether a Field is Populated"}),"\n",(0,a.jsxs)(n.p,{children:["You can call the ",(0,a.jsx)(n.code,{children:"_populated()"})," function to check whether a field is populated. If ",(0,a.jsx)(n.code,{children:"_populated()"})," returns a ",(0,a.jsx)(n.a,{href:"https://masteringjs.io/tutorials/fundamentals/truthy",children:"truthy value"}),", you can assume the field is populated."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"story._populated('author'); // truthy\n\nstory._depopulate('author'); // Make `author` not populated anymore\nstory._populated('author'); // undefined\n"})}),"\n",(0,a.jsxs)(n.p,{children:["A common reason for checking whether a path is populated is getting the ",(0,a.jsx)(n.code,{children:"author.id"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"story._populated('author'); // truthy\nstory.author.id; \n\nstory._depopulate('author'); // Make `author` not populated anymore\nstory._populated('author'); // false\n"})}),"\n",(0,a.jsx)(n.h3,{id:"advanced-population",children:"Advanced Population"}),"\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.code,{children:"*"})," as a wildcard to populate all references in the current model. In this example all properties types references will be populated:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"await story._populate('*');\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Also, you can automatically populate child document references by passing a second integer value to ",(0,a.jsx)(n.code,{children:"_populate"})," function,\nthis value will tell to Ottoman how many levels deep you want to populate."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Using on a document\nawait story._populate('*', 2);\n\n// Using on a Model\nconst stories = await Story.find({ title: 'Casino Royale' }, { populate: 'author', populateMaxDeep: 2 })\n"})}),"\n",(0,a.jsx)(n.p,{children:"In the above example Ottoman will populate all references on story and story's children.\nIt doesn't matter if they are single or array references."}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsxs)(n.p,{children:["Beware from setting a large integer value on populate ",(0,a.jsx)(n.code,{children:"deep"})," argument, it could affect the query performance."]})}),"\n",(0,a.jsx)(n.h2,{id:"next-up",children:"Next Up"}),"\n",(0,a.jsxs)(n.p,{children:["Now that we've covered Documents, let's take a look at ",(0,a.jsx)(n.a,{href:"/docs/basic/query-builder",children:"Query Builder"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var o=t(6540);const a={},s=o.createContext(a);function r(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);