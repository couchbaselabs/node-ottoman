"use strict";(self.webpackChunkottoman_documentation=self.webpackChunkottoman_documentation||[]).push([[9789],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,k=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},30159:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:1,title:"How Ottoman Works"},i="How Ottoman Works",l={unversionedId:"advanced/how-ottoman-works",id:"advanced/how-ottoman-works",title:"How Ottoman Works",description:"This section is for those who want to understand how Ottoman works in depth.",source:"@site/docs/advanced/how-ottoman-works.md",sourceDirName:"advanced",slug:"/advanced/how-ottoman-works",permalink:"/docs/advanced/how-ottoman-works",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"How Ottoman Works"},sidebar:"tutorialSidebar",previous:{title:"Query Builder",permalink:"/docs/basic/query-builder"},next:{title:"Advanced Concepts",permalink:"/docs/advanced/ottoman"}},s={},p=[{value:"Key Generation Layer",id:"key-generation-layer",level:2},{value:"<code>keyGenerator</code> function",id:"keygenerator-function",level:3},{value:"Override <code>keyGenerator</code> function",id:"override-keygenerator-function",level:4},{value:"Defining a <code>Model</code>",id:"defining-a-model",level:4},{value:"Creating a Document",id:"creating-a-document",level:4},{value:"Retrieving a Document",id:"retrieving-a-document",level:4},{value:"Ottoman vs NodeJS SDK",id:"ottoman-vs-nodejs-sdk",level:2},{value:"Ottoman Schema and Model Definitions",id:"ottoman-schema-and-model-definitions",level:3},{value:"Ottoman vs SDK Connection",id:"ottoman-vs-sdk-connection",level:3},{value:"Model <em>find</em>",id:"model-find",level:3},{value:"SDK:",id:"sdk",level:4},{value:"Ottoman:",id:"ottoman",level:4},{value:"SDK:",id:"sdk-1",level:4},{value:"Ottoman:",id:"ottoman-1",level:4},{value:"Model <em>findOneAndUpdate</em>",id:"model-findoneandupdate",level:3},{value:"SDK:",id:"sdk-2",level:4},{value:"Ottoman:",id:"ottoman-2",level:4},{value:"Model <em>findOneAndRemove</em>",id:"model-findoneandremove",level:3},{value:"SDK:",id:"sdk-3",level:4},{value:"Ottoman:",id:"ottoman-3",level:4},{value:"Bulk Operations",id:"bulk-operations",level:2},{value:"Create Many Documents",id:"create-many-documents",level:3},{value:"SDK",id:"sdk-4",level:4},{value:"OTTOMAN",id:"ottoman-4",level:4},{value:"Conclusions",id:"conclusions",level:3}],d={toc:p};function m(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-ottoman-works"},"How Ottoman Works"),(0,r.kt)("p",null,"This section is for those who want to understand how Ottoman works in depth."),(0,r.kt)("h2",{id:"key-generation-layer"},"Key Generation Layer"),(0,r.kt)("p",null,"Ottoman provides an abstraction layer to handle the ",(0,r.kt)("inlineCode",{parentName:"p"},"keys")," that will be used to store/access the documents on the Database Server."),(0,r.kt)("p",null,"Developers will only have to work with the ",(0,r.kt)("inlineCode",{parentName:"p"},"document")," ids while ottoman handles the keys automatically for them."),(0,r.kt)("h3",{id:"keygenerator-function"},(0,r.kt)("inlineCode",{parentName:"h3"},"keyGenerator")," function"),(0,r.kt)("p",null,"The default ",(0,r.kt)("inlineCode",{parentName:"p"},"keyGenerator")," function is used to generate all keys by Ottoman in your Couchbase datastore."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const keyGenerator = ({ metadata }) => `${ metadata.modelName }`\n")),(0,r.kt)("p",null,"Using the default ",(0,r.kt)("inlineCode",{parentName:"p"},"keyGenerator")," function that Ottoman provides and assuming your ",(0,r.kt)("inlineCode",{parentName:"p"},"modelName")," is 'User', the key for your document would look like:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"User::0477024c"))),(0,r.kt)("p",null,"::: tip Notice\nThis resulted key is a combination of the prefix as provided by the default  ",(0,r.kt)("inlineCode",{parentName:"p"},"keyGenerator")," function (",(0,r.kt)("inlineCode",{parentName:"p"},"${metadata.modelName}"),") ",(0,r.kt)("a",{parentName:"p",href:"/docs/basic/model.html#model-id"},"appended with an ID")," (",(0,r.kt)("inlineCode",{parentName:"p"},"0477024c"),").\n:::"),(0,r.kt)("h4",{id:"override-keygenerator-function"},"Override ",(0,r.kt)("inlineCode",{parentName:"h4"},"keyGenerator")," function"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"keyGenerator")," function allows you to only override the prefix for a key, or completely remove the prefix such that the key always matches the ID of the document generated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const keyGenerator = ({ metadata }) => `${ metadata.scopeName }`\nconst User = model('User', schema, { keyGenerator, scopeName: 'myScope' })\n")),(0,r.kt)("p",null,"In this example we are overriding the ",(0,r.kt)("inlineCode",{parentName:"p"},"keyGenerator")," function and replacing the ",(0,r.kt)("inlineCode",{parentName:"p"},"${metadata.modelName}")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"${metadata.scopeName}"),". Using this override, the key for your document would look like:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"myScope::0477024c"))),(0,r.kt)("p",null,"To understand how ID differs from keys in Ottoman we need to explore creating a model, understand how Ottoman deals with IDs which affect your key and then how to retrieve your document by ID."),(0,r.kt)("h4",{id:"defining-a-model"},"Defining a ",(0,r.kt)("inlineCode",{parentName:"h4"},"Model")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"...\nconst userSchema = new Schema({ name: string });\nconst User = model('User', userSchema);\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Set your rules in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Schema"),"."),(0,r.kt)("li",{parentName:"ol"},"Now you can create your ",(0,r.kt)("inlineCode",{parentName:"li"},"Model")," with the ",(0,r.kt)("inlineCode",{parentName:"li"},"Schema")," defined.")),(0,r.kt)("h4",{id:"creating-a-document"},"Creating a Document"),(0,r.kt)("p",null,"Let see how Ottoman handles a new document creation."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"How to Use",src:n(93078).Z,width:"1057",height:"370"})),(0,r.kt)("p",null,"::: tip Notice\nUsing Ottoman you only need to think about ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," in order to execute CRUD Operations over documents.\nAll the ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," management will be automatically handled by Ottoman.\n:::"),(0,r.kt)("h4",{id:"retrieving-a-document"},"Retrieving a Document"),(0,r.kt)("p",null,"Ottoman provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"findById")," method at the ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," level to retrieve a document by ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". See the picture below to understand how it works."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"How to Use",src:n(80043).Z,width:"1024",height:"558"})),(0,r.kt)("h2",{id:"ottoman-vs-nodejs-sdk"},"Ottoman vs NodeJS SDK"),(0,r.kt)("p",null,"In this section we will be reviewing some methods of the Ottoman Model, and comparing them with their respective implementation in the Couchbase NodeJs SDK."),(0,r.kt)("p",null,"The environment on which these tests were run has the following characteristics:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Info"),(0,r.kt)("th",{parentName:"tr",align:null},"Properties"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Processor"),(0,r.kt)("td",{parentName:"tr",align:null},"Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"RAM"),(0,r.kt)("td",{parentName:"tr",align:null},"16.0 GB")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"System type"),(0,r.kt)("td",{parentName:"tr",align:null},"64-bit operating system, x64-based processor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Storage"),(0,r.kt)("td",{parentName:"tr",align:null},"SSD 500GB")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SO"),(0,r.kt)("td",{parentName:"tr",align:null},"Windows 10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("em",{parentName:"strong"},"Couchbase"))),(0,r.kt)("td",{parentName:"tr",align:null},"Enterprise Edition 7.0.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("em",{parentName:"strong"},"Couchbase Node.js SDK"))),(0,r.kt)("td",{parentName:"tr",align:null},"v3.2.2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("em",{parentName:"strong"},"Ottoman"))),(0,r.kt)("td",{parentName:"tr",align:null},"v2.0.0-beta.9")))),(0,r.kt)("admonition",{title:"About metrics",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"For metrics we run each example around a thousand times and take the average tests run time and ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/api/process.html#process_process"},"heapUsed*")),(0,r.kt)("h5",{parentName:"admonition",id:"heapused-is-the-actual-memory-used-during-the-process-execution-according-to-the-documentation-the-memory-used-by-c-objects-bound-to-javascript-objects-managed-by-v8"},"*",(0,r.kt)("em",{parentName:"h5"},"heapUsed"),': is the actual memory used during the process execution, according to the documentation, the memory used by "C++ objects bound to JavaScript objects managed by V8"')),(0,r.kt)("h3",{id:"ottoman-schema-and-model-definitions"},"Ottoman Schema and Model Definitions"),(0,r.kt)("p",null,"We will use the data model corresponding to the type of ",(0,r.kt)("inlineCode",{parentName:"p"},"airport")," collection, within the ",(0,r.kt)("inlineCode",{parentName:"p"},"travel-sample")," bucket and scope ",(0,r.kt)("inlineCode",{parentName:"p"},"inventory"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Define Geolocation Schema will be part of Airport Schema\nconst GeolocationSchema = new Schema({\n  alt: Number,\n  lat: { type: Number, required: true },\n  lon: { type: Number, required: true },\n  accuracy: String,\n});\n\n// Define Airport Schema\nconst AirportSchema = new Schema({\n  airportname: { type: String, required: true },\n  city: { type: String, required: true },\n  country: { type: String, required: true },\n  faa: String,\n  geo: GeolocationSchema,\n  icao: String,\n  tz: { type: String, required: true },\n});\n")),(0,r.kt)("p",null,"Our model would look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// Define Airport model instance\nconst AirportModel = model(\n  'airport', // Model name (collection)\n  AirportSchema, // Schema defined\n  {\n    modelKey: 'type', // Ottoman by default use `_type`\n    scopeName: 'inventory', // Collection scope\n    keyGeneratorDelimiter: '_', // By default Ottoman use ::\n  });\n")),(0,r.kt)("h3",{id:"ottoman-vs-sdk-connection"},"Ottoman vs SDK Connection"),(0,r.kt)("p",null,"Create our Ottoman instance and connect:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const ottoman = new Ottoman();\nawait ottoman.connect({\n  connectionString: 'couchbase://127.0.0.1',\n  bucketName: 'travel-sample',\n  username: 'Administrator',\n  password: 'password',\n});\n")),(0,r.kt)("p",null,"Couchbase NodeJs SDK cluster definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const cluster = new couchbase.Cluster('couchbase://127.0.0.1', {\n  username: 'Administrator',\n  password: 'password',\n});\n\nconst bucket = cluster.bucket('travel-sample');\nconst collection = bucket.scope('inventory').collection('airport');\n")),(0,r.kt)("h3",{id:"model-find"},"Model ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("a",{parentName:"em",href:"/docs/api/interfaces/imodel.html#find"},"find"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Let's see a simple filterless search implementation.")),(0,r.kt)("h4",{id:"sdk"},"SDK:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const query = `\n  SELECT *\n  FROM \\`travel-sample\\`.\\`inventory\\`.\\`airport\\`\n  WHERE type = \"airport\"\n  LIMIT 1;\n`;\ntry {\n  const result = await cluster.query(query);\n  console.log('Result:', JSON.stringify(result.rows, null, 2));\n} catch(error) {\n  console.error('Query failed: ', error);\n}\n")),(0,r.kt)("h4",{id:"ottoman"},"Ottoman:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"try {\n  const result = await AirportModel.find({}, { limit: 1 });\n  console.log('Result:', JSON.stringify(result.rows, null, 2));\n} catch(error) {\n  console.error('Query failed: ', error);\n}\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'Result: [\n  {\n    "airport": {\n      "id": 1254,\n      "type": "airport",\n      "airportname": "Calais Dunkerque",\n      "city": "Calais",\n      "country": "France",\n      "faa": "CQF",\n      "icao": "LFAC",\n      "tz": "Europe/Paris",\n      "geo": {\n        "lat": 50.962097,\n        "lon": 1.954764,\n        "alt": 12\n      }\n    }\n  }\n]\n')),(0,r.kt)("admonition",{title:"Metrics",type:"tip"},(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Library"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Time (",(0,r.kt)("em",{parentName:"th"},"ms"),")"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Heap Use (",(0,r.kt)("em",{parentName:"th"},"MB"),")"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Ottoman"),(0,r.kt)("td",{parentName:"tr",align:"right"},"6.8"),(0,r.kt)("td",{parentName:"tr",align:"right"},"9.1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NodeJs SDK"),(0,r.kt)("td",{parentName:"tr",align:"right"},"6"),(0,r.kt)("td",{parentName:"tr",align:"right"},"9.6"))))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Now using some conditions and sort:")),(0,r.kt)("h4",{id:"sdk-1"},"SDK:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const query = `\n  SELECT airportname\n  FROM \\`travel-sample\\`.\\`inventory\\`.\\`airport\\`\n  WHERE\n    country = "France" AND\n    airportname LIKE "Aix%" AND\n    type = "airport"\n  ORDER BY airportname ASC\n`;\ntry {\n  const result = await cluster.query(query);\n  console.log(\'Result:\', JSON.stringify(result.rows, null, 2));\n} catch(error) {\n  console.error(\'Query failed: \', error);\n}\n')),(0,r.kt)("h4",{id:"ottoman-1"},"Ottoman:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"try {\n  const result = await AirportModel.find(\n    { country: 'France', airportname: { $like: 'Aix%' } },\n    { select: ['airportname'], sort: { airportname: 'ASC' } },\n  );\n  console.log('Result:', JSON.stringify(result.rows, null, 2));\n} catch (error) {\n  console.error('Query failed: ', error);\n}\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'Result: [\n  {\n    "airportname": "Aix Les Bains"\n  },\n  {\n    "airportname": "Aix Les Milles"\n  }\n]\n')),(0,r.kt)("admonition",{title:"Metrics",type:"tip"},(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Library"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Time (",(0,r.kt)("em",{parentName:"th"},"ms"),")"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Heap Use (",(0,r.kt)("em",{parentName:"th"},"MB"),")"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Ottoman"),(0,r.kt)("td",{parentName:"tr",align:"right"},"3.47"),(0,r.kt)("td",{parentName:"tr",align:"right"},"9.1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NodeJs SDK"),(0,r.kt)("td",{parentName:"tr",align:"right"},"3.43"),(0,r.kt)("td",{parentName:"tr",align:"right"},"9.78"))))),(0,r.kt)("h3",{id:"model-findoneandupdate"},"Model ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("a",{parentName:"em",href:"/docs/api/interfaces/imodel.html#findoneandupdate"},"findOneAndUpdate"))),(0,r.kt)("h4",{id:"sdk-2"},"SDK:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const query = `\n  SELECT META().id as id\n  FROM \\`travel-sample\\`.\\`inventory\\`.\\`airport\\`\n  WHERE airportname LIKE \"Aix Les Bains%\"\n    AND type = \"airport\"\n  LIMIT 1\n`;\n\ntry {\n  const response = await cluster.query(query);\n  const key = response.rows[0].id;\n  const { cas, value } = await collection.get(key);\n\n  await collection.replace(key,\n    { ...value, airportname: 'Aix Les Bains Updated' },\n    { cas }\n  );\n  const result = await collection.get(key);\n  console.log('Result:', JSON.stringify(result.content, null, 2));\n} catch (error) {\n  console.error('Query failed: ', error);\n}\n")),(0,r.kt)("h4",{id:"ottoman-2"},"Ottoman:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"try {\n  const result = await AirportModel.findOneAndUpdate(\n    { airportname: { $like: 'Aix Les Bains%' } },\n    { airportname: 'Aix Les Bains Updated' },\n    { new: true }, // To get updated object\n  );\n  console.log('Result:', JSON.stringify(result, null, 2));\n} catch (error) {\n  console.error('Query failed: ', error);\n}\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'Result: {\n  "airportname": "Aix Les Bains",\n  "city": "Chambery",\n  "country": "France",\n  "faa": "CMF",\n  "geo": {\n    "lat": 45.63805,\n    "lon": 5.880225,\n    "alt": 779\n  },\n  "icao": "LFLB",\n  "id": 1329,\n  "tz": "Europe/Paris",\n  "type": "airport"\n}\n')),(0,r.kt)("admonition",{title:"Metrics",type:"tip"},(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Library"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Time (",(0,r.kt)("em",{parentName:"th"},"ms"),")"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Heap Use (",(0,r.kt)("em",{parentName:"th"},"MB"),")"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Ottoman"),(0,r.kt)("td",{parentName:"tr",align:"right"},"10.08"),(0,r.kt)("td",{parentName:"tr",align:"right"},"10.49")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NodeJs SDK"),(0,r.kt)("td",{parentName:"tr",align:"right"},"11.06"),(0,r.kt)("td",{parentName:"tr",align:"right"},"7.95"))))),(0,r.kt)("h3",{id:"model-findoneandremove"},"Model ",(0,r.kt)("em",{parentName:"h3"},(0,r.kt)("a",{parentName:"em",href:"/docs/api/interfaces/imodel.html#findoneandremove"},"findOneAndRemove"))),(0,r.kt)("h4",{id:"sdk-3"},"SDK:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const query = `\n      SELECT META().id as id\n      FROM \\`travel-sample\\`.\\`inventory\\`.\\`airport\\`\n      WHERE airportname LIKE "Aix Les Bains%"\n        AND type = "airport"\n      LIMIT 1\n    `;\n\ntry {\n  const response = await cluster.query(query);\n  const key = response.rows[0].id;\n  const { cas } = await collection.get(key);\n  const result = await collection.remove(key, { cas });\n  console.log(`RESULT: `, result);\n} catch (error) {\n  console.error(\'Query failed: \', error);\n}\n')),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"RESULT:  MutationResult {\n  cas: CbCas { '0': <Buffer 00 00 09 f4 de 87 a2 16> },\n  token: undefined\n}\n")),(0,r.kt)("h4",{id:"ottoman-3"},"Ottoman:"),(0,r.kt)("p",null,"In Ottoman using ",(0,r.kt)("inlineCode",{parentName:"p"},"findOneAndRemove")," method we will have the document deleted as a result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"try {\n  const result = await AirportModel.findOneAndRemove(\n    { airportname: { $like: 'Aix Les Bains%' } }\n  );\n  console.log('Result:', JSON.stringify(result, null, 2));\n} catch (error) {\n  console.error('Query failed: ', error);\n}\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'Result: {\n  "airportname": "Aix Les Bains",\n  "city": "Chambery",\n  "country": "France",\n  "faa": "CMF",\n  "geo": {\n    "lat": 45.63805,\n    "lon": 5.880225,\n    "alt": 779\n  },\n  "icao": "LFLB",\n  "id": 1329,\n  "tz": "Europe/Paris"\n}\n')),(0,r.kt)("admonition",{title:"Metrics",type:"tip"},(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Library"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Time (",(0,r.kt)("em",{parentName:"th"},"ms"),")"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Heap Use (",(0,r.kt)("em",{parentName:"th"},"MB"),")"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Ottoman"),(0,r.kt)("td",{parentName:"tr",align:"right"},"11.44"),(0,r.kt)("td",{parentName:"tr",align:"right"},"11.047")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NodeJs SDK"),(0,r.kt)("td",{parentName:"tr",align:"right"},"14.86"),(0,r.kt)("td",{parentName:"tr",align:"right"},"7.95*"))))),(0,r.kt)("h2",{id:"bulk-operations"},"Bulk Operations"),(0,r.kt)("p",null,"Bulk operations describes how to operate on more than one document at the same time, this is a way to increasing network performance in to pipeline operations with ",(0,r.kt)("a",{parentName:"p",href:"https://docs.couchbase.com/nodejs-sdk/current/howtos/concurrent-async-apis.html#batching"},(0,r.kt)("inlineCode",{parentName:"a"},"Batching Operations")),". As Node.js inherently performs all operations in an asynchronous manner, no special implementation is required in order to enable batching. Simply perform a number of operations simultaneously, and they will be batched on the network. This happens internally and is highly efficient. Let's see in action with Ottoman and Node SDK:"),(0,r.kt)("h3",{id:"create-many-documents"},"Create Many Documents"),(0,r.kt)("p",null,"For our example implementation we will use ",(0,r.kt)("inlineCode",{parentName:"p"},"bulkAirportDocs")," array as defined next:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const bulkAirportDocs = [\n  {\n    airportname: 'Airport test 1',\n    city: 'City A1',\n    country: 'Country A1',\n    faa: 'CA1',\n    geo: {\n      lat: 0.0,\n      lon: 0.0,\n      alt: 0,\n    },\n    icao: 'CAC1',\n    tz: 'Europe/Paris',\n  },\n  {\n    airportname: 'Airport test 2',\n    city: 'City A2',\n    country: 'Country A2',\n    faa: 'CA2',\n    geo: {\n      lat: 0.0,\n      lon: 0.0,\n      alt: 0,\n    },\n    icao: 'CAC2',\n    tz: 'Europe/Paris',\n  },\n];\n")),(0,r.kt)("h4",{id:"sdk-4"},"SDK"),(0,r.kt)("p",null,"In the next example we will be using ",(0,r.kt)("a",{parentName:"p",href:"https://docs.couchbase.com/nodejs-sdk/current/howtos/kv-operations.html#crud-operations"},"Insert")," operation for write a JSON document with a given ID (key) to the database applying batching operation strategy:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// Note that this behaviour extends to the world of async/await,\n// such that following would be automatically batched across the network:\ntry {\n  const result = await Promise.all(\n    bulkAirportDocs.map(async (doc) => {\n      await collection.insert(`airport_${ doc.id }`, doc);\n      const newDoc = await collection.get(`airport_${ doc.id }`);\n      return newDoc.content;\n    }),\n  );\n  console.log(`RESULT: `, JSON.stringify(result, null, 2));\n} catch(error) {\n  console.error('Query failed: ', error);\n}\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'[\n  {\n    "id": "b6027254-7071-4e76-9303-aa18f3b93bcd",\n    "airportname": "Airport test 1",\n    "city": "City A1",\n    "country": "Country A1",\n    "faa": "CA1",\n    "geo": {\n      "lat": 0,\n      "lon": 0,\n      "alt": 0\n    },\n    "icao": "CAC1",\n    "tz": "Europe/Paris"\n  },\n  {\n    "id": "d4331304-e321-45cb-89d2-23530240b9bd",\n    "airportname": "Airport test 2",\n    "city": "City A2",\n    "country": "Country A2",\n    "faa": "CA2",\n    "geo": {\n      "lat": 0,\n      "lon": 0,\n      "alt": 0\n    },\n    "icao": "CAC2",\n    "tz": "Europe/Paris"\n  }\n]\n')),(0,r.kt)("h4",{id:"ottoman-4"},"OTTOMAN"),(0,r.kt)("p",null,"The way to do the same example above in Ottoman is as simple as using Model's ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced/how-ottoman-works.html#bulk-operations"},"createMany")," function as we can see below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"try {\n  const result = await AirportModel.createMany(bulkAirportDocs);\n  console.log(JSON.stringify(result, null, 2));\n} catch (error) {\n  console.error('Query failed: ', error);\n}\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'{\n  "status": "SUCCESS",\n  "message": {\n    "success": 2,\n    "match_number": 2,\n    "errors": [],\n    "data": [\n      {\n        "airportname": "Airport test 1",\n        "city": "City A1",\n        "country": "Country A1",\n        "faa": "CA1",\n        "geo": {\n          "lat": 0,\n          "lon": 0,\n          "alt": 0\n        },\n        "icao": "CAC1",\n        "tz": "Europe/Paris",\n        "id": "b6027254-7071-4e76-9303-aa18f3b93bcd",\n        "type": "airport"\n      },\n      {\n        "airportname": "Airport test 2",\n        "city": "City A2",\n        "country": "Country A2",\n        "faa": "CA2",\n        "geo": {\n          "lat": 0,\n          "lon": 0,\n          "alt": 0\n        },\n        "icao": "CAC2",\n        "tz": "Europe/Paris",\n        "id": "d4331304-e321-45cb-89d2-23530240b9bd",\n        "type": "airport"\n      }\n    ]\n  }\n}\n')),(0,r.kt)("h3",{id:"conclusions"},"Conclusions"),(0,r.kt)("p",null,"As can be appreciated for most of the search operations through filters in the Couchbase SDK, we must define our N1QL sentences while Ottoman internally takes care of it. Ottoman provides a method of interacting with a database using an object-oriented language, although it also allows the direct use of N1QL queries. Developers can interact with the database without becoming an expert in N1QL, which can save time and keep code streamlined, especially when is not that familiar with N1QL language, eliminating repetitive code and reducing the time taken in repetitive development tasks such as changes to the object model would be made in one place. The Ottoman abstraction layer allows us to focus exclusively on the use of the ODM and leave the management and interaction of the low-level database to it, however, insulates the developer from that layer, at times can potentially make it difficult to solve low-level problems."))}m.isMDXComponent=!0},93078:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/create-63635341b5b5fde5571c1ec811505290.png"},80043:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/findById-ef14e5e8ad61a6e162c72f48861567b7.png"}}]);